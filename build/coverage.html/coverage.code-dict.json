{"/home/travis/build/npmtest/node-npmtest-apidoc/test.js":"/* istanbul instrument in package npmtest_apidoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-apidoc/lib.npmtest_apidoc.js":"/* istanbul instrument in package npmtest_apidoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_apidoc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_apidoc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-apidoc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-apidoc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_apidoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_apidoc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_apidoc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_apidoc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_apidoc.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_apidoc.__dirname + '/lib.npmtest_apidoc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc/lib/index.js":"var _        = require('lodash');\nvar apidoc   = require('apidoc-core');\nvar fs       = require('fs-extra');\nvar path     = require('path');\nvar winston  = require('winston');\nvar Markdown = require('markdown-it');\n\nvar PackageInfo = require('./package_info');\n\nvar defaults = {\n    dest    : path.join(__dirname, '../doc/'),\n    template: path.join(__dirname, '../template/'),\n\n    debug     : false,\n    silent    : false,\n    verbose   : false,\n    simulate  : false,\n    parse     : false, // Only parse and return the data, no file creation.\n    colorize  : true,\n    markdown  : true,\n    config    : './',\n    apiprivate: false,\n    encoding  : 'utf8'\n};\n\nvar app = {\n    log     : {},\n    markdownParser: null,\n    options : {}\n};\n\n// Display uncaught Exception.\nprocess.on('uncaughtException', function(err) {\n    console.error((new Date()).toUTCString() + ' uncaughtException:', err.message);\n    console.error(err.stack);\n    process.exit(1);\n});\n\n/**\n * Create the documentation\n *\n * @param  {Object} options See defaults and apidoc-core defaults for all options / `apidoc --help`\n * @returns {Mixed} true = ok, but nothing todo | false = error | Object with parsed data and project-informations.\n */\nfunction createDoc(options) {\n    var api;\n    var apidocPath = path.join(__dirname, '../');\n    var markdownParser;\n    var packageInfo;\n\n    options = _.defaults({}, options, defaults);\n\n    // Paths.\n    options.dest     = path.join(options.dest, './');\n    options.template = path.join(options.template, './');\n\n    // Line-Ending.\n    if (options.lineEnding) {\n        if (options.lineEnding === 'CRLF')\n            options.lineEnding = '\\r\\n'; // win32\n        else if (options.lineEnding === 'CR')\n            options.lineEnding = '\\r'; // darwin\n        else\n            options.lineEnding = '\\n'; // linux\n    }\n\n    // Options.\n    app.options = options;\n\n    // Logger.\n    app.log = new (winston.Logger)({\n        transports: [\n            new (winston.transports.Console)({\n                level      : app.options.debug ? 'debug' : app.options.verbose ? 'verbose' : 'info',\n                silent     : app.options.silent,\n                prettyPrint: true,\n                colorize   : app.options.colorize,\n                timestamp  : false\n            }),\n        ]\n    });\n\n    // Markdown Parser: enable / disable / use a custom parser.\n    if(app.options.markdown === true) {\n        markdownParser = new Markdown({\n            breaks     : false,\n            html       : true,\n            linkify    : false,\n            typographer: false\n        });\n    } else if(app.options.markdown !== false) {\n        // Include custom Parser @see MARKDOWN.md and test/fixtures/custom_markdown_parser.js\n        Markdown = require(app.options.markdown); // Overwrite default Markdown.\n        markdownParser = new Markdown();\n    }\n    app.markdownParser = markdownParser;\n\n    try {\n        packageInfo = new PackageInfo(app);\n\n        // generator information\n        var json = JSON.parse( fs.readFileSync(apidocPath + 'package.json', 'utf8') );\n        apidoc.setGeneratorInfos({\n            name   : json.name,\n            time   : new Date(),\n            url    : json.homepage,\n            version: json.version\n        });\n        apidoc.setLogger(app.log);\n        apidoc.setMarkdownParser(markdownParser);\n        apidoc.setPackageInfos(packageInfo.get());\n\n        api = apidoc.parse(app.options);\n\n        if (api === true) {\n            app.log.info('Nothing to do.');\n            return true;\n        }\n        if (api === false)\n            return false;\n\n        if (app.options.parse !== true)\n            createOutputFiles(api);\n\n        app.log.info('Done.');\n        return api;\n    } catch(e) {\n        app.log.error(e.message);\n        if (e.stack)\n            app.log.debug(e.stack);\n        return false;\n    }\n}\n\n/**\n * Save parsed data to files\n *\n * @param {Object[]} blocks\n * @param {Object} packageInfos\n */\nfunction createOutputFiles(api) {\n    if (app.options.simulate)\n        app.log.warn('!!! Simulation !!! No file or dir will be copied or created.');\n\n    app.log.verbose('create dir: ' + app.options.dest);\n    if ( ! app.options.simulate)\n        fs.mkdirsSync(app.options.dest);\n\n    app.log.verbose('copy template ' + app.options.template + ' to: ' + app.options.dest);\n    if ( ! app.options.simulate)\n        fs.copySync(app.options.template, app.options.dest);\n\n    // Write api_data\n    app.log.verbose('write json file: ' + app.options.dest + 'api_data.json');\n    if( ! app.options.simulate)\n        fs.writeFileSync(app.options.dest + './api_data.json', api.data + '\\n');\n\n    app.log.verbose('write js file: ' + app.options.dest + 'api_data.js');\n    if( ! app.options.simulate)\n        fs.writeFileSync(app.options.dest + './api_data.js', 'define({ \"api\": ' + api.data + ' });' + '\\n');\n\n    // Write api_project\n    app.log.verbose('write json file: ' + app.options.dest + 'api_project.json');\n    if( ! app.options.simulate)\n        fs.writeFileSync(app.options.dest + './api_project.json', api.project + '\\n');\n\n    app.log.verbose('write js file: ' + app.options.dest + 'api_project.js');\n    if( ! app.options.simulate)\n        fs.writeFileSync(app.options.dest + './api_project.js', 'define(' + api.project + ');' + '\\n');\n}\n\nmodule.exports = {\n    createDoc: createDoc\n};\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc-core/lib/index.js":"var _      = require('lodash');\nvar fs     = require('fs');\nvar os     = require('os');\nvar path   = require('path');\nvar semver = require('semver');\n\n/*jshint -W079 */\nvar Filter = require('./filter');\nvar Parser = require('./parser');\nvar Worker = require('./worker');\n\nvar PluginLoader = require('./plugin_loader');\n\nvar FileError      = require('./errors/file_error');\nvar ParserError    = require('./errors/parser_error');\nvar WorkerError    = require('./errors/worker_error');\n\n// const\nvar SPECIFICATION_VERSION = '0.3.0';\n\nvar defaults = {\n    excludeFilters: [],\n    includeFilters: [ '.*\\\\.(clj|cls|coffee|cpp|cs|dart|erl|exs?|go|groovy|ino?|java|js|jsx|litcoffee|lua|p|php?|pl|pm|py|rb|scala|ts|vue)$' ],\n\n    src: path.join(__dirname, '../example/'),\n\n    filters: {},\n    languages: {},\n    parsers: {},\n    workers: {},\n\n    lineEnding: detectLineEnding(),\n    encoding: 'utf8'\n};\n\nvar app = {\n    options     : {}, // see defaults\n    log         : logger,\n    generator   : {},\n    packageInfos: {},\n    markdownParser: false,\n    filters: {\n        apierror                 : './filters/api_error.js',\n        apiheader                : './filters/api_header.js',\n        apiparam                 : './filters/api_param.js',\n        apisuccess               : './filters/api_success.js'\n    },\n    languages: {\n        '.clj'                   : './languages/clj.js',\n        '.coffee'                : './languages/coffee.js',\n        '.erl'                   : './languages/erl.js',\n        '.ex'                    : './languages/ex.js',\n        '.exs'                   : './languages/ex.js',\n        '.litcoffee'             : './languages/coffee.js',\n        '.lua'                   : './languages/lua.js',\n        '.pl'                    : './languages/pm.js',\n        '.pm'                    : './languages/pm.js',\n        '.py'                    : './languages/py.js',\n        '.rb'                    : './languages/rb.js',\n        'default'                : './languages/default.js'\n    },\n    parsers: {\n        api                      : './parsers/api.js',\n        apidefine                : './parsers/api_define.js',\n        apidescription           : './parsers/api_description.js',\n        apierror                 : './parsers/api_error.js',\n        apierrorexample          : './parsers/api_error_example.js',\n        apiexample               : './parsers/api_example.js',\n        apiheader                : './parsers/api_header.js',\n        apiheaderexample         : './parsers/api_header_example.js',\n        apigroup                 : './parsers/api_group.js',\n        apiname                  : './parsers/api_name.js',\n        apiparam                 : './parsers/api_param.js',\n        apiparamexample          : './parsers/api_param_example.js',\n        apipermission            : './parsers/api_permission.js',\n        apisuccess               : './parsers/api_success.js',\n        apisuccessexample        : './parsers/api_success_example.js',\n        apiuse                   : './parsers/api_use.js',\n        apiversion               : './parsers/api_version.js',\n        apisamplerequest         : './parsers/api_sample_request.js',\n        apideprecated            : './parsers/api_deprecated.js'\n    },\n    workers: {\n        apierrorstructure        : './workers/api_error_structure.js',\n        apierrortitle            : './workers/api_error_title.js',\n        apigroup                 : './workers/api_group.js',\n        apiheaderstructure       : './workers/api_header_structure.js',\n        apiheadertitle           : './workers/api_header_title.js',\n        apiname                  : './workers/api_name.js',\n        apiparamtitle            : './workers/api_param_title.js',\n        apipermission            : './workers/api_permission.js',\n        apisamplerequest         : './workers/api_sample_request.js',\n        apistructure             : './workers/api_structure.js',\n        apisuccessstructure      : './workers/api_success_structure.js',\n        apisuccesstitle          : './workers/api_success_title.js',\n        apiuse                   : './workers/api_use.js'\n    },\n    hooks: {},\n    addHook: addHook,\n    hook: applyHook\n};\n\nvar defaultGenerator = {\n    name   : 'apidoc',\n    time   : new Date(),\n    url    : 'http://apidocjs.com',\n    version: '0.0.0'\n};\n\n// TODO: find abetter name for PackageInfos (-> apidoc-conf)\nvar defaultPackageInfos = {\n    description: '',\n    name       : '',\n    sampleUrl  : false,\n    version    : '0.0.0',\n    defaultVersion: '0.0.0'\n};\n\n// Simple logger interace\nvar logger = {\n    debug  : function() { console.log(arguments); },\n    verbose: function() { console.log(arguments); },\n    info   : function() { console.log(arguments); },\n    warn   : function() { console.log(arguments); },\n    error  : function() { console.log(arguments); }\n};\n\n/**\n * Return the used specification version\n *\n * @returns {String}\n */\nfunction getSpecificationVersion() {\n    return SPECIFICATION_VERSION;\n}\n\n/**\n * Detect and return OS specific line ending.\n *\n * @returns {String}\n */\nfunction detectLineEnding() {\n    if ( os.platform() === 'win32' )\n        return '\\r\\n';\n    if ( os.platform() === 'darwin' )\n        return '\\r';\n    return '\\n';\n}\n\n/**\n * Parser\n *\n * @param {Object} options        Overwrite default options.\n * @param {Object} logger         Logger (with methods: debug, verbose, info, warn and error is necessary).\n\n * @returns {Mixed} true = ok, but nothing todo | false = error | Object with parsed data and project-informations.\n *          {\n *              data   : { ... }\n *              project: { ... }\n *          }\n */\nfunction parse(options) {\n    options = _.defaults({}, options, defaults);\n\n    // extend with custom functions\n    app.filters   = _.defaults({}, options.filters, app.filters);\n    app.languages = _.defaults({}, options.languages, app.languages);\n    app.parsers   = _.defaults({}, options.parsers, app.parsers);\n    app.workers   = _.defaults({}, options.workers, app.workers);\n    app.hooks     = _.defaults({}, options.hooks, app.hooks);\n\n    // options\n    app.options = options;\n\n    // generator\n    app.generator = _.defaults({}, app.generator, defaultGenerator);\n\n    // packageInfos\n    app.packageInfos = _.defaults({}, app.packageInfos, defaultPackageInfos);\n\n    var parsedFiles = [];\n    var parsedFilenames = [];\n\n    try {\n        // Log version information\n        var filename = path.join(__dirname, '../', './package.json');\n        var packageJson = JSON.parse( fs.readFileSync( filename , 'utf8') );\n        app.log.verbose('apidoc-generator name: '    + app.generator.name);\n        app.log.verbose('apidoc-generator version: ' + app.generator.version);\n        app.log.verbose('apidoc-core version: '      + packageJson.version);\n        app.log.verbose('apidoc-spec version: '      + getSpecificationVersion());\n\n        new PluginLoader(app);\n\n        var parser = new Parser(app);\n        var worker = new Worker(app);\n        var filter = new Filter(app);\n\n        // Make them available for plugins\n        app.parser = parser;\n        app.worker = worker;\n        app.filter = filter;\n\n        // if input option for source is an array of folders,\n        // parse each folder in the order provided.\n        app.log.verbose('run parser');\n        if (options.src instanceof Array) {\n            options.src.forEach(function(folder) {\n                // Keep same options for each folder, but ensure the 'src' of options\n                // is the folder currently being processed.\n                var folderOptions = options;\n                folderOptions.src = path.join(folder, './');\n                parser.parseFiles(folderOptions, parsedFiles, parsedFilenames);\n            });\n        }\n        else {\n            // if the input option for source is a single folder, parse as usual.\n            options.src = path.join(options.src, './');\n            parser.parseFiles(options, parsedFiles, parsedFilenames);\n        }\n\n        if (parsedFiles.length > 0) {\n            // process transformations and assignments\n            app.log.verbose('run worker');\n            worker.process(parsedFiles, parsedFilenames, app.packageInfos);\n\n            // cleanup\n            app.log.verbose('run filter');\n            var blocks = filter.process(parsedFiles, parsedFilenames);\n\n            // sort by group ASC, name ASC, version DESC\n            blocks.sort(function(a, b) {\n                var nameA = a.group + a.name;\n                var nameB = b.group + b.name;\n                if (nameA === nameB) {\n                    if (a.version === b.version)\n                        return 0;\n                    return (semver.gte(a.version, b.version)) ? -1 : 1;\n                }\n                return (nameA < nameB) ? -1 : 1;\n            });\n\n            // add apiDoc specification version\n            app.packageInfos.apidoc = SPECIFICATION_VERSION;\n\n            // add apiDoc specification version\n            app.packageInfos.generator = app.generator;\n\n            // api_data\n            var apiData = JSON.stringify(blocks, null, 2);\n            apiData = apiData.replace(/(\\r\\n|\\n|\\r)/g, app.options.lineEnding);\n\n            // api_project\n            var apiProject = JSON.stringify(app.packageInfos, null, 2);\n            apiProject = apiProject.replace(/(\\r\\n|\\n|\\r)/g, app.options.lineEnding);\n\n            return {\n                data   : apiData,\n                project: apiProject\n            };\n        }\n        return true;\n    } catch(e) {\n        // display error by instance\n        var extra;\n        var meta = {};\n        if (e instanceof FileError) {\n            meta = { 'Path': e.path };\n            app.log.error(e.message, meta);\n        } else if (e instanceof ParserError) {\n            extra = e.extra;\n            if (e.source)\n                extra.unshift({ 'Source': e.source });\n            if (e.element)\n                extra.unshift({ 'Element': '@' + e.element });\n            if (e.block)\n                extra.unshift({ 'Block': e.block });\n            if (e.file)\n                extra.unshift({ 'File': e.file });\n\n            extra.forEach(function(obj) {\n                var key = Object.keys(obj)[0];\n                meta[key] = obj[key];\n            });\n\n            app.log.error(e.message, meta);\n        }\n        else if (e instanceof WorkerError) {\n            extra = e.extra;\n            if (e.definition)\n                extra.push({ 'Definition': e.definition });\n            if (e.example)\n                extra.push({ 'Example': e.example });\n            extra.unshift({ 'Element': '@' + e.element });\n            extra.unshift({ 'Block': e.block });\n            extra.unshift({ 'File': e.file });\n\n            extra.forEach(function(obj) {\n                var key = Object.keys(obj)[0];\n                meta[key] = obj[key];\n            });\n\n            app.log.error(e.message, meta);\n        }\n        else {\n            app.log.error(e.message);\n            if (e.stack)\n                app.log.debug(e.stack);\n        }\n        return false;\n    }\n}\n\n/**\n * Set generator informations.\n *\n * @param {Object} [generator]         Generator informations.\n * @param {String} [generator.name]    Generator name (UI-Name).\n * @param {String} [generator.time]    Time for the generated doc\n * @param {String} [generator.version] Version (semver) of the generator, e.g. 1.2.3\n * @param {String} [generator.url]     Url to the generators homepage\n */\nfunction setGeneratorInfos(generator) {\n    app.generator = generator;\n}\n\n/**\n * Set a logger.\n *\n * @param {Object} logger A Logger (@see https://github.com/flatiron/winston for details)\n *                        Interface:\n *                            debug(msg, meta)\n *                            verbose(msg, meta)\n *                            info(msg, meta)\n *                            warn(msg, meta)\n *                            error(msg, meta)\n */\nfunction setLogger(logger) {\n    app.log = logger;\n}\n\n/**\n * Set the markdown parser.\n *\n * @param {Object} [markdownParser] Markdown parser.\n */\nfunction setMarkdownParser(markdownParser) {\n    app.markdownParser = markdownParser;\n}\n\n/**\n * Set package infos.\n *\n * @param {Object} [packageInfos]             Collected from apidoc.json / package.json.\n * @param {String} [packageInfos.name]        Project name.\n * @param {String} [packageInfos.version]     Version (semver) of the project, e.g. 1.0.27\n * @param {String} [packageInfos.description] A short description.\n * @param {String} [packageInfos.sampleUrl]   @see http://apidocjs.com/#param-api-sample-request\n */\nfunction setPackageInfos(packageInfos) {\n    app.packageInfos = packageInfos;\n}\n\n/**\n * Register a hook function.\n *\n * @param {String}   name           Name of the hook. Hook overview: https://github.com/apidoc/apidoc-core/hooks.md\n * @param {Function} func           Callback function.\n * @param {Integer}  [priority=100] Hook priority. Lower value will be executed first.\n *                                  Same value overwrite a previously defined hook.\n */\nfunction addHook(name, func, priority) {\n    priority = priority || 100;\n\n    if ( ! app.hooks[name])\n        app.hooks[name] = [];\n\n    app.log.debug('add hook: ' + name + ' [' + priority + ']');\n\n    // Find position and overwrite same priority\n    var replace = 0;\n    var pos = 0;\n    app.hooks[name].forEach( function(entry, index) {\n        if (priority === entry.priority) {\n            pos = index;\n            replace = 1;\n        } else if (priority > entry.priority) {\n            pos = index + 1;\n        }\n    });\n\n    app.hooks[name].splice(pos, replace, {\n        func: func,\n        priority: priority\n    });\n}\n\n/**\n * Execute a hook.\n */\nfunction applyHook(name /* , ...args */) {\n    if ( ! app.hooks[name])\n        return Array.prototype.slice.call(arguments, 1, 2)[0];\n\n    var args = Array.prototype.slice.call(arguments, 1);\n    app.hooks[name].forEach( function(hook) {\n        hook.func.apply(this, args);\n    });\n    return args[0];\n}\n\n\nmodule.exports = {\n    getSpecificationVersion: getSpecificationVersion,\n    parse                  : parse,\n    setGeneratorInfos      : setGeneratorInfos,\n    setLogger              : setLogger,\n    setMarkdownParser      : setMarkdownParser,\n    setPackageInfos        : setPackageInfos\n};\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc-core/lib/filter.js":"var util = require('util');\nvar _ = require('lodash');\n\nvar app = {};\n\n/**\n * Filter\n * Cleanup the data, e.g.: remove double fields, happen when overwrite a global inherited field with a local definition.\n *\n * @param {Object} _app\n */\nfunction Filter(_app) {\n    var self = this;\n\n    // global variables\n    app = _app;\n\n    // class variables\n    this.filters = {};\n\n    // load filters\n    var filters = Object.keys(app.filters);\n    filters.forEach(function(filter) {\n        if (_.isObject( app.filters[filter] )) {\n            app.log.debug('inject filter: ' + filter);\n            self.addFilter(filter, app.filters[filter] );\n        } else {\n            var filename = app.filters[filter];\n            app.log.debug('load filter: ' + filter + ', ' + filename);\n            self.addFilter(filter, require(filename));\n        }\n    });\n}\n\n/**\n * Inherit\n */\nutil.inherits(Filter, Object);\n\n/**\n * Exports\n */\nmodule.exports = Filter;\n\n/**\n * Add Filter\n */\nFilter.prototype.addFilter = function(name, filter) {\n    this.filters[name] = filter;\n};\n\n/**\n * Execute filter\n */\nFilter.prototype.process = function(parsedFiles, parsedFilenames) {\n    // filter each @api-Parameter\n    _.each(this.filters, function(filter, name) {\n        if (filter.postFilter) {\n            app.log.verbose('filter postFilter: ' + name);\n            filter.postFilter(parsedFiles, parsedFilenames);\n        }\n    });\n\n    // reduce to local blocks where global is empty\n    var blocks = [];\n    parsedFiles.forEach(function(parsedFile) {\n        parsedFile.forEach(function(block) {\n            if (Object.keys(block.global).length === 0 && Object.keys(block.local).length > 0)\n                blocks.push(block.local);\n        });\n    });\n    return blocks;\n};\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc-core/lib/parser.js":"var _    = require('lodash');\nvar fs   = require('fs');\nvar path = require('path');\nvar util = require('util');\nvar iconv = require('iconv-lite');\n\nvar findFiles = require('./utils/find_files');\n\nvar ParameterError = require('./errors/parameter_error');\nvar ParserError    = require('./errors/parser_error');\n\nvar app = {};\n\nfunction Parser(_app) {\n    var self = this;\n\n    // global variables\n    app = _app;\n\n    // class variables\n    self.languages = {};\n    self.parsers = {};\n    self.parsedFileElements = [];\n    self.parsedFiles = [];\n    self.countDeprecated = {};\n\n    // load languages\n    var languages = Object.keys(app.languages);\n    languages.forEach(function(language) {\n        if (_.isObject( app.languages[language] )) {\n            app.log.debug('inject parser language: ' + language);\n            self.addLanguage(language, app.languages[language] );\n        } else {\n            var filename = app.languages[language];\n            app.log.debug('load parser language: ' + language + ', ' + filename);\n            self.addLanguage(language, require(filename));\n        }\n    });\n\n    // load parser\n    var parsers = Object.keys(app.parsers);\n    parsers.forEach(function(parser) {\n        if (_.isObject( app.parsers[parser] )) {\n            app.log.debug('inject parser: ' + parser);\n            self.addParser(parser, app.parsers[parser] );\n        } else {\n            var filename = app.parsers[parser];\n            app.log.debug('load parser: ' + parser + ', ' + filename);\n            self.addParser(parser, require(filename));\n        }\n    });\n}\n\n/**\n * Inherit\n */\nutil.inherits(Parser, Object);\n\n/**\n * Exports\n */\nmodule.exports = Parser;\n\n/**\n * Add a Language\n */\nParser.prototype.addLanguage = function(name, language) {\n    this.languages[name] = language;\n};\n\n/**\n * Add a Parser\n */\nParser.prototype.addParser = function(name, parser) {\n    this.parsers[name] = parser;\n};\n\n/**\n * Parse files in specified folder\n *\n * @param {Object} options The options used to parse and filder the files.\n * @param {Object[]} parsedFiles List of parsed files.\n * @param {String[]} parsedFilenames List of parsed files, with full path.\n */\nParser.prototype.parseFiles = function(options, parsedFiles, parsedFilenames) {\n    var self = this;\n\n    findFiles.setPath(options.src);\n    findFiles.setExcludeFilters(options.excludeFilters);\n    findFiles.setIncludeFilters(options.includeFilters);\n    var files = findFiles.search();\n\n    // Parser\n    for (var i = 0; i < files.length; i += 1) {\n        var filename = options.src + files[i];\n        var parsedFile = self.parseFile(filename, options.encoding);\n        if (parsedFile) {\n            app.log.verbose('parse file: ' + filename);\n            parsedFiles.push(parsedFile);\n            parsedFilenames.push(filename);\n        }\n    }\n};\n\n/**\n * Execute Fileparsing\n */\nParser.prototype.parseFile = function(filename, encoding) {\n    var self = this;\n\n    if (typeof(encoding) === 'undefined')\n        encoding = 'utf8';\n\n    app.log.debug('inspect file: ' + filename);\n\n    self.filename = filename;\n    self.extension = path.extname(filename).toLowerCase();\n    // TODO: Not sure if this is correct. Without skipDecodeWarning we got string errors\n    // https://github.com/apidoc/apidoc-core/pull/25\n    var fileContent = fs.readFileSync(filename, { encoding: 'binary' });\n    iconv.skipDecodeWarning = true;\n    self.src = iconv.decode(fileContent, encoding);\n    app.log.debug('size: ' + self.src.length);\n\n    // unify line-breaks\n    self.src = self.src.replace(/\\r\\n/g, '\\n');\n\n    self.blocks = [];\n    self.indexApiBlocks = [];\n\n    // determine blocks\n    self.blocks = self._findBlocks();\n    if (self.blocks.length === 0)\n        return;\n\n    app.log.debug('count blocks: ' + self.blocks.length);\n\n    // determine elements in blocks\n    self.elements = self.blocks.map(function(block, i) {\n        var elements = self.findElements(block, filename);\n        app.log.debug('count elements in block ' + i + ': ' + elements.length);\n        return elements;\n    });\n    if (self.elements.length === 0)\n        return;\n\n    // determine list of blocks with API elements\n    self.indexApiBlocks = self._findBlockWithApiGetIndex(self.elements);\n    if (self.indexApiBlocks.length === 0)\n        return;\n\n    return self._parseBlockElements(self.indexApiBlocks, self.elements, filename);\n};\n\n/**\n * Parse API Elements with Plugins\n *\n * @param indexApiBlocks\n * @param detectedElements\n * @returns {Array}\n */\nParser.prototype._parseBlockElements = function(indexApiBlocks, detectedElements, filename) {\n    var self = this;\n    var parsedBlocks = [];\n\n    for (var i = 0; i < indexApiBlocks.length; i += 1) {\n        var blockIndex = indexApiBlocks[i];\n        var elements = detectedElements[blockIndex];\n        var blockData = {\n            global: {},\n            local : {}\n        };\n        var countAllowedMultiple = 0;\n\n        for (var j = 0; j < elements.length; j += 1) {\n            var element = elements[j];\n            var elementParser = self.parsers[element.name];\n\n            if ( ! elementParser) {\n                app.log.warn('parser plugin \\'' + element.name + '\\' not found in block: ' + blockIndex);\n            } else {\n                app.log.debug('found @' + element.sourceName + ' in block: ' + blockIndex);\n\n                // Deprecation warning\n                if (elementParser.deprecated) {\n                    self.countDeprecated[element.sourceName] = self.countDeprecated[element.sourceName] ? self.countDeprecated[element.sourceName] + 1 : 1;\n\n                    var message = '@' + element.sourceName + ' is deprecated';\n                    if (elementParser.alternative)\n                        message = '@' + element.sourceName + ' is deprecated, please use ' + elementParser.alternative;\n\n                    if (self.countDeprecated[element.sourceName] === 1)\n                        // show deprecated message only 1 time as warning\n                        app.log.warn(message);\n                    else\n                        // show deprecated message more than 1 time as verbose message\n                        app.log.verbose(message);\n\n                    app.log.verbose('in file: ' + filename + ', block: ' + blockIndex);\n                }\n\n                var values;\n                var preventGlobal;\n                var allowMultiple;\n                var pathTo;\n                var attachMethod;\n                try {\n                    // parse element and retrieve values\n                    values = elementParser.parse(element.content, element.source);\n\n                    // HINT: pathTo MUST be read after elementParser.parse, because of dynamic paths\n                    // Add all other options after parse too, in case of a custom plugin need to modify params.\n\n                    // check if it is allowed to add to global namespace\n                    preventGlobal = elementParser.preventGlobal === true;\n\n                    // allow multiple inserts into pathTo\n                    allowMultiple = elementParser.allowMultiple === true;\n\n\n                    // path to an array, where the values should be attached\n                    pathTo = '';\n                    if (elementParser.path) {\n                        if (typeof elementParser.path === 'string')\n                            pathTo = elementParser.path;\n                        else\n                            pathTo = elementParser.path(); // for dynamic paths\n                    }\n\n                    if ( ! pathTo)\n                        throw new ParserError('pathTo is not defined in the parser file.', '', '', element.sourceName);\n\n                    // method how the values should be attached (insert or push)\n                    attachMethod = elementParser.method || 'push';\n\n                    if (attachMethod !== 'insert' && attachMethod !== 'push')\n                        throw new ParserError('Only push or insert are allowed parser method values.', '', '', element.sourceName);\n\n                    // TODO: put this into \"converters\"\n                    if (values) {\n                        // Markdown.\n                        if ( app.markdownParser &&\n                             elementParser.markdownFields &&\n                             elementParser.markdownFields.length > 0\n                        ) {\n                            for (var markdownIndex = 0; markdownIndex < elementParser.markdownFields.length; markdownIndex += 1) {\n                                var field = elementParser.markdownFields[markdownIndex];\n                                var value = _.get(values, field);\n                                if (value) {\n                                    value = app.markdownParser.render(value);\n                                    // remove line breaks\n                                    value = value.replace(/(\\r\\n|\\n|\\r)/g, ' ');\n\n                                    value = value.trim();\n                                    _.set(values, field, value);\n\n                                    // TODO: Little hacky, not sure to handle this here or in template\n                                    if ( elementParser.markdownRemovePTags &&\n                                         elementParser.markdownRemovePTags.length > 0 &&\n                                         elementParser.markdownRemovePTags.indexOf(field) !== -1\n                                    ) {\n                                        // Remove p-Tags\n                                        value = value.replace(/(<p>|<\\/p>)/g, '');\n                                        _.set(values, field, value);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } catch(e) {\n                    if (e instanceof ParameterError) {\n                        var extra = [];\n                        if (e.definition)\n                            extra.push({ 'Definition': e.definition });\n                        if (e.example)\n                            extra.push({ 'Example': e.example });\n                        throw new ParserError(e.message,\n                                              self.filename, (blockIndex + 1), element.sourceName, element.source, extra);\n                    }\n                    throw new ParserError('Undefined error.',\n                                          self.filename, (blockIndex + 1), element.sourceName, element.source);\n                }\n\n                if ( ! values)\n                    throw new ParserError('Empty parser result.',\n                                          self.filename, (blockIndex + 1), element.sourceName, element.source);\n\n                if (preventGlobal) {\n                    // Check if count global namespace entries > count allowed\n                    // (e.g. @successTitle is global, but should co-exist with @apiErrorStructure)\n                    if (Object.keys(blockData.global).length > countAllowedMultiple)\n                        throw new ParserError('Only one definition or usage is allowed in the same block.',\n                                              self.filename, (blockIndex + 1), element.sourceName, element.source);\n                }\n\n                // only one global allowed per block\n                if (pathTo === 'global' || pathTo.substr(0, 7) === 'global.') {\n                    if (allowMultiple) {\n                        countAllowedMultiple += 1;\n                    } else {\n                        if (Object.keys(blockData.global).length > 0)\n                            throw new ParserError('Only one definition is allowed in the same block.',\n                                                  self.filename, (blockIndex + 1), element.sourceName, element.source);\n\n                        if (preventGlobal === true)\n                            throw new ParserError('Only one definition or usage is allowed in the same block.',\n                                                  self.filename, (blockIndex + 1), element.sourceName, element.source);\n                    }\n                }\n\n                if ( ! blockData[pathTo])\n                    self._createObjectPath(blockData, pathTo, attachMethod);\n\n                var blockDataPath = self._pathToObject(pathTo, blockData);\n\n                // insert Fieldvalues in Path-Array\n                if (attachMethod === 'push')\n                    blockDataPath.push(values);\n                else\n                    _.extend(blockDataPath, values);\n\n                // insert Fieldvalues in Mainpath\n                if (elementParser.extendRoot === true)\n                    _.extend(blockData, values);\n\n                blockData.index = blockIndex + 1;\n            }\n        }\n        if (blockData.index && blockData.index > 0)\n            parsedBlocks.push(blockData);\n    }\n    return parsedBlocks;\n};\n\n/**\n * Create a not existing Path in an Object\n *\n * @param src\n * @param path\n * @param {String} attachMethod Create last element as object or array: 'insert', 'push'\n * @returns {Object}\n */\nParser.prototype._createObjectPath = function(src, path, attachMethod) {\n    if ( ! path)\n        return src;\n    var pathParts = path.split('.');\n    var current = src;\n    for (var i = 0; i < pathParts.length; i += 1) {\n        var part = pathParts[i];\n        if ( ! current[part]) {\n            if (i === (pathParts.length - 1) && attachMethod === 'push' )\n                current[part] = [];\n            else\n                current[part] = {};\n        }\n        current = current[part];\n    }\n    return current;\n};\n\n\n/**\n * Return Path to Object\n */\nParser.prototype._pathToObject = function(path, src) {\n    if ( ! path)\n        return src;\n    var pathParts = path.split('.');\n    var current = src;\n    for (var i = 0; i < pathParts.length; i += 1) {\n        var part = pathParts[i];\n        current = current[part];\n    }\n    return current;\n};\n\n/**\n * Determine Blocks\n */\nParser.prototype._findBlocks = function() {\n    var self = this;\n    var blocks = [];\n    var src = self.src;\n\n    // Replace Linebreak with Unicode\n    src = src.replace(/\\n/g, '\\uffff');\n\n    var regexForFile = this.languages[self.extension] || this.languages['default'];\n    var matches = regexForFile.docBlocksRegExp.exec(src);\n    while (matches) {\n        var block = matches[2] || matches[1];\n\n        // Reverse Unicode Linebreaks\n        block = block.replace(/\\uffff/g, '\\n');\n\n        block = block.replace(regexForFile.inlineRegExp, '');\n        blocks.push(block);\n\n        // Find next\n        matches = regexForFile.docBlocksRegExp.exec(src);\n    }\n    return blocks;\n};\n\n/**\n * Return block indexes with active API-elements\n *\n * An @apiIgnore ignores the block.\n * Other, non @api elements, will be ignored.\n */\nParser.prototype._findBlockWithApiGetIndex = function(blocks) {\n    var foundIndexes = [];\n    for (var i = 0; i < blocks.length; i += 1) {\n        var found = false;\n        for (var j = 0; j < blocks[i].length; j += 1) {\n            // check apiIgnore\n            if (blocks[i][j].name.substr(0, 9) === 'apiignore') {\n                app.log.debug('apiIgnore found in block: ' + i);\n                found = false;\n                break;\n            }\n\n            // check app.options.apiprivate and apiPrivate\n            if (!app.options.apiprivate && blocks[i][j].name.substr(0, 10) === 'apiprivate') {\n                app.log.debug('private flag is set to false and apiPrivate found in block: ' + i);\n                found = false;\n                break;\n            }\n\n            if (blocks[i][j].name.substr(0, 3) === 'api')\n                found = true;\n        }\n        if (found) {\n            foundIndexes.push(i);\n            app.log.debug('api found in block: ' + i);\n        }\n    }\n    return foundIndexes;\n};\n\n/**\n * Get Elements of Blocks\n */\nParser.prototype.findElements = function(block, filename) {\n    var elements = [];\n\n    // Replace Linebreak with Unicode\n    block = block.replace(/\\n/g, '\\uffff');\n\n    // Elements start with @\n    var elementsRegExp = /(@(\\w*)\\s?(.+?)(?=\\uffff[\\s\\*]*@|$))/gm;\n    var matches = elementsRegExp.exec(block);\n    while (matches) {\n        var element = {\n            source    : matches[1],\n            name      : matches[2].toLowerCase(),\n            sourceName: matches[2],\n            content   : matches[3]\n        };\n\n        // reverse Unicode Linebreaks\n        element.content = element.content.replace(/\\uffff/g, '\\n');\n        element.source = element.source.replace(/\\uffff/g, '\\n');\n\n        app.hook('parser-find-element-' + element.name, element, block, filename);\n\n        elements.push(element);\n\n        app.hook('parser-find-elements', elements, element, block, filename);\n\n        // next Match\n        matches = elementsRegExp.exec(block);\n    }\n    return elements;\n};\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc-core/lib/utils/find_files.js":"var fs       = require('fs-extra');\nvar klawSync = require('klaw-sync');\nvar os       = require('os');\nvar path     = require('path');\n\nvar FileError = require('../errors/file_error');\n\n/**\n * Search files recursivly and filter with include / exlude filters\n */\nfunction FindFiles() {\n  this.path = process.cwd();\n  this.excludeFilters = [];\n  this.includeFilters = [];\n}\n\n/**\n * Exports\n */\nmodule.exports = new FindFiles();\n\n/**\n * Set path to source-files\n *\n * @param {String} path\n */\nFindFiles.prototype.setPath = function(newPath) {\n  if (path) {\n    this.path = path.resolve(newPath);\n  }\n};\n\n/**\n * Set exclude filters\n *\n * @param {string[]} excludeFilters\n */\nFindFiles.prototype.setExcludeFilters = function(excludeFilters) {\n  if (excludeFilters) {\n    this.excludeFilters = excludeFilters;\n  }\n};\n\n/**\n * Set include filters\n *\n * @param {string[]} isSilent\n */\nFindFiles.prototype.setIncludeFilters = function(includeFilters) {\n  if (includeFilters) {\n    this.includeFilters = includeFilters;\n  }\n};\n\n/**\n * Search files recursivly and filter by include / exlude filters\n *\n * @returns {String[]}\n */\nFindFiles.prototype.search = function() {\n  var self = this;\n  var files = [];\n\n  try {\n    files = klawSync(self.path).map( function(entry) {\n      return entry.path;\n    });\n\n    // create RegExp Include Filter List\n    var regExpIncludeFilters = [];\n    var filters = self.includeFilters;\n    if (typeof(filters) === 'string') {\n      filters = [ filters ];\n    }\n\n    filters.forEach(function(filter) {\n      if (filter.length > 0) {\n        regExpIncludeFilters.push( new RegExp(filter) );\n      }\n    });\n\n    // RegExp Include Filter\n    var length = regExpIncludeFilters.length;\n    files = files.filter(function(filename) {\n      // not include Directories like 'dirname.js/'\n      if (fs.statSync(filename).isDirectory()) {\n        return 0;\n      }\n\n      if (os.platform() === 'win32') {\n        filename = filename.replace(/\\\\/g, '/');\n      }\n\n      // apply every filter\n      for (var i = 0; i < length; i += 1) {\n        if(regExpIncludeFilters[i].test(filename)) {\n          return 1;\n        }\n      }\n\n      return 0;\n    });\n\n    // create RegExp Exclude Filter List\n    var regExpExcludeFilters = [];\n    filters = self.excludeFilters;\n    if (typeof(filters) === 'string') {\n      filters = [ filters ];\n    }\n\n    filters.forEach(function(filter) {\n      if (filter.length > 0) {\n        regExpExcludeFilters.push( new RegExp(filter) );\n      }\n    });\n\n    // RegExp Exclude Filter\n    length = regExpExcludeFilters.length;\n    files = files.filter(function(filename) {\n      if (os.platform() === 'win32') {\n       filename = filename.replace(/\\\\/g, '/');\n      }\n\n      // apply every filter\n      for(var i = 0; i < length; i += 1) {\n        if(regExpExcludeFilters[i].test(filename)) {\n          return 0;\n        }\n      }\n\n      return 1;\n    });\n  } catch (e) {\n    throw e;\n  } finally {\n    if ( ! files || files.length === 0) {\n      throw new FileError('No files found.', self.path);\n    }\n\n    // remove source path prefix\n    files = files.map( function(filename) {\n      if (filename.startsWith(self.path)) {\n        return filename.substr(self.path.length + 1);\n      }\n      return filename;\n    });\n  }\n  return files;\n};\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc-core/lib/errors/file_error.js":"var util = require('util');\nvar fs = require('path');\n\nfunction FileError(message, file, path) {\n    // enable stack trace\n    Error.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n\n    this.message = message;\n    this.file = file || '';\n    this.path = path || file;\n\n    if (this.path && this.path.charAt(this.path.length - 1) !== '/') {\n        this.path = fs.dirname(this.path);\n    }\n}\n\n/**\n * Inherit from Error\n */\nutil.inherits(FileError, Error);\n\n/**\n * Exports\n */\nmodule.exports = FileError;\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc-core/lib/errors/parameter_error.js":"var util = require('util');\n\nfunction ParameterError(message, element, definition, example) {\n    // enable stack trace\n    Error.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n\n    this.message = message;\n    this.element = element;\n    this.definition = definition;\n    this.example = example;\n}\n\n/**\n * Inherit from Error\n */\nutil.inherits(ParameterError, Error);\n\n/**\n * Exports\n */\nmodule.exports = ParameterError;\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc-core/lib/errors/parser_error.js":"var util = require('util');\n\nfunction ParserError(message, file, block, element, source, extra) {\n    // enable stack trace\n    Error.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n\n    this.message = message;\n    this.file = file;\n    this.block = block;\n    this.element = element;\n    this.source = source;\n    this.extra = extra || [];\n}\n\n/**\n * Inherit from Error\n */\nutil.inherits(ParserError, Error);\n\n/**\n * Exports\n */\nmodule.exports = ParserError;\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc-core/lib/worker.js":"var util = require('util');\nvar _ = require('lodash');\n\nvar app = {};\n\n/**\n * Worker\n *\n * Attaches defined data to parameter which inherit the data.\n * It uses 2 functions, preProcess and postProcess (with the result of preProcess).\n *\n * preProcess  Generates a list with [defineName][name][version] = value\n * postProcess Attach the preProcess data with the nearest version to the tree.\n *\n * @param {Object} _app\n */\nfunction Worker(_app) {\n    var self = this;\n\n    // global variables\n    app = _app;\n\n    // class variables\n    this.workers = {};\n\n    // load worker\n    var workers = Object.keys(app.workers);\n    workers.forEach(function(worker) {\n        if (_.isObject( app.workers[worker] )) {\n            app.log.debug('inject worker: ' + worker);\n            self.addWorker(worker, app.workers[worker] );\n        } else {\n            var filename = app.workers[worker];\n            app.log.debug('load worker: ' + worker + ', ' + filename);\n            self.addWorker(worker, require(filename));\n        }\n    });\n}\n\n/**\n * Inherit\n */\nutil.inherits(Worker, Object);\n\n/**\n * Exports\n */\nmodule.exports = Worker;\n\n/**\n * Add Worker\n */\nWorker.prototype.addWorker = function(name, worker) {\n    this.workers[name] = worker;\n};\n\n/**\n * Execute worker\n *\n * @todo Add priority system (if needed), if a plugin need an other operation to be done before.\n */\nWorker.prototype.process = function(parsedFiles, parsedFilenames, packageInfos) {\n    // some smaller operation that are not outsourced to extra workers\n    // TODO: add priority system first and outsource them then\n    parsedFiles.forEach(function(parsedFile, fileIndex) {\n        parsedFile.forEach(function(block) {\n            if (Object.keys(block.global).length === 0 && Object.keys(block.local).length > 0) {\n                if ( ! block.local.type)\n                    block.local.type = '';\n\n                if ( ! block.local.url)\n                    block.local.url = '';\n\n                if ( ! block.local.version)\n                    block.local.version = packageInfos.defaultVersion;\n\n                if ( ! block.local.filename)\n                    block.local.filename = parsedFilenames[fileIndex];\n\n                // convert dir delimeter \\\\ to /\n                block.local.filename = block.local.filename.replace(/\\\\/g, '/');\n            }\n\n        });\n    });\n\n    // process transformations and assignments for each @api-Parameter\n    var preProcessResults = {};\n\n    _.each(this.workers, function(worker, name) {\n        if (worker.preProcess) {\n            app.log.verbose('worker preProcess: ' + name);\n            var result = worker.preProcess(parsedFiles, parsedFilenames, packageInfos);\n            _.extend(preProcessResults, result);\n        }\n    });\n    _.each(this.workers, function(worker, name) {\n        if (worker.postProcess) {\n            app.log.verbose('worker postProcess: ' + name);\n            worker.postProcess(parsedFiles, parsedFilenames, preProcessResults, packageInfos);\n        }\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc-core/lib/plugin_loader.js":"var _    = require('lodash');\nvar path = require('path');\nvar util = require('util');\nvar glob = require('glob');\n\nvar app = {};\n\nfunction PluginLoader(_app) {\n  var self = this;\n\n  // global variables\n  app = _app;\n\n  // class variables\n  self.plugins = {};\n\n  // Try to load global apidoc-plugins (if apidoc is installed locally it tries only local)\n  this.detectPugins(__dirname);\n\n  // Try to load local apidoc-plugins\n  this.detectPugins( path.join(process.cwd(), '/node_modules') );\n\n  if (Object.keys(this.plugins).length === 0) {\n    app.log.debug('No plugins found.');\n  }\n\n  this.loadPlugins();\n}\n/**\n * Inherit\n */\nutil.inherits(PluginLoader, Object);\n\n/**\n * Exports\n */\nmodule.exports = PluginLoader;\n\n/**\n * Detect modules start with \"apidoc-plugin-\".\n * Search up to root until found a plugin.\n */\nPluginLoader.prototype.detectPugins = function(dir) {\n  var self = this;\n\n  // Every dir start with \"apidoc-plugin-\", because for the tests of apidoc-plugin-test.\n  var plugins;\n  try {\n    plugins = glob.sync(dir + '/apidoc-plugin-*')\n    .concat( glob.sync(dir + '/@*/apidoc-plugin-*') );\n  } catch (e) {\n    app.log.warn(e);\n    return;\n  }\n\n  if (plugins.length === 0) {\n    dir = path.join(dir, '..');\n    if (dir === '/' || dir.substr(1) === ':\\\\') {\n      return;\n    }\n    return this.detectPugins(dir);\n  }\n\n  var offset = dir.length + 1;\n  plugins.forEach( function(plugin) {\n      var name = plugin.substr(offset);\n      var filename = path.relative(__dirname, plugin);\n      app.log.debug('add plugin: ' + name + ', ' + filename);\n      self.addPlugin(name, plugin);\n  });\n};\n\n/**\n * Add Plugin to plugin list.\n */\nPluginLoader.prototype.addPlugin = function(name, filename) {\n  if (this.plugins[name]) {\n    app.log.debug('overwrite plugin: ' + name + ', ' + this.plugins[name]);\n  }\n\n  this.plugins[name] = filename;\n};\n\n/**\n * Load and initialize Plugins.\n */\nPluginLoader.prototype.loadPlugins = function() {\n  _.forEach(this.plugins, function(filename, name) {\n    app.log.debug('load plugin: ' + name + ', ' + filename);\n    var plugin;\n    try {\n      plugin = require(filename);\n    } catch(e) {\n    }\n    if (plugin && plugin.init) {\n      plugin.init(app);\n    } else {\n      app.log.debug('Ignored, no init function found.');\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc-core/lib/errors/worker_error.js":"var util = require('util');\n\nfunction WorkerError(message, file, block, element, definition, example, extra) {\n    // enable stack trace\n    Error.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n\n    this.message = message;\n    this.file = file;\n    this.block = block;\n    this.element = element;\n    this.definition = definition;\n    this.example = example;\n    this.extra = extra;\n}\n\n/**\n * Inherit from Error\n */\nutil.inherits(WorkerError, Error);\n\n/**\n * Exports\n */\nmodule.exports = WorkerError;\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc/lib/package_info.js":"var _    = require('lodash');\nvar fs   = require('fs');\nvar path = require('path');\n\nvar app = {};\n\nfunction PackageInfo(_app) {\n    // global variables\n    app = _app;\n}\n\n/**\n * Exports\n */\nmodule.exports = PackageInfo;\n\n/**\n * Read apidoc.json / package.json data\n */\nPackageInfo.prototype.get = function() {\n    var result = {};\n\n    // Read package.json\n    var packageJson = this._readPackageData('package.json');\n\n    if (packageJson.apidoc)\n        result = packageJson.apidoc;\n\n    result = _.defaults({}, result, {\n        name       : packageJson.name        || '',\n        version    : packageJson.version     || '0.0.0',\n        description: packageJson.description || '',\n    });\n\n    // read apidoc.json (and overwrite package.json information)\n    var apidocJson = this._readPackageData('apidoc.json');\n\n    // apidoc.json has higher priority\n    _.extend(result, apidocJson);\n\n    // options.packageInfo overwrites packageInfo\n    _.extend(result, app.options.packageInfo);\n\n    // replace header footer with file contents\n    _.extend(result, this._getHeaderFooter(result));\n\n    if (Object.keys(apidocJson).length === 0 && ! packageJson.apidoc)\n        app.log.warn('Please create an apidoc.json configuration file.');\n\n    return result;\n};\n\n/**\n * Read json data from source dir, or if it not exists from current dir.\n * Return the data merged with the default values.\n *\n * @param {String} filename\n * @param {Object} defaults\n * @returns {Object}\n */\nPackageInfo.prototype._readPackageData = function(filename) {\n    var result = {};\n    var dir = this._resolveSrcPath();\n    var jsonFilename = path.join(dir, filename);\n\n    // Read from source dir\n    if ( ! fs.existsSync(jsonFilename)) {\n        // Read from config dir (default './')\n        jsonFilename = path.join(app.options.config, filename);\n    }\n    if ( ! fs.existsSync(jsonFilename)) {\n        app.log.debug(jsonFilename + ' not found!');\n    } else {\n        try {\n            result = JSON.parse( fs.readFileSync(jsonFilename, 'utf8') );\n            app.log.debug('read: ' + jsonFilename);\n        } catch (e) {\n            throw new Error('Can not read: ' + filename + ', please check the format (e.g. missing comma).');\n        }\n    }\n    return result;\n};\n\n/**\n * Get json.header / json.footer title and markdown content (from file)\n *\n * @param {Object} json\n * @returns {Object}\n */\nPackageInfo.prototype._getHeaderFooter = function(json) {\n    var result = {};\n    var self = this;\n\n    ['header', 'footer'].forEach(function(key) {\n        if (json[key] && json[key].filename) {\n//            var filename = path.join(app.options.src, json[key].filename);\n            var dir = self._resolveSrcPath();\n            var filename = path.join(dir, json[key].filename);\n\n            if ( ! fs.existsSync(filename))\n                filename = path.join('./', json[key].filename);\n\n            try {\n                app.log.debug('read header file: ' + filename);\n                var content = fs.readFileSync(filename, 'utf8');\n                result[key] = {\n                    title  : json[key].title,\n                    content: app.markdownParser ? app.markdownParser.render(content) : content\n                };\n            } catch (e) {\n                throw new Error('Can not read: ' + filename + '.');\n            }\n        }\n    });\n\n    return result;\n};\n\n/**\n * Resolve source path.\n *\n * If multiple input dirs are given, the current workdir './' will be returned.\n * On one input dir, the current workdir will be the input dir.\n *\n * @returns {string}\n * @private\n */\nPackageInfo.prototype._resolveSrcPath = function() {\n    var dir = './';\n\n    if (app.options.src instanceof Array) {\n        if (app.options.src.length === 1) {\n            dir = app.options.src[0];\n        }\n    } else {\n        if (app.options.src) {\n            dir = app.options.src;\n        }\n    }\n\n    return dir;\n};\n\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc/template/main.js":"require.config({\n    paths: {\n        bootstrap: './vendor/bootstrap.min',\n        diffMatchPatch: './vendor/diff_match_patch.min',\n        handlebars: './vendor/handlebars.min',\n        handlebarsExtended: './utils/handlebars_helper',\n        jquery: './vendor/jquery.min',\n        locales: './locales/locale',\n        lodash: './vendor/lodash.custom.min',\n        pathToRegexp: './vendor/path-to-regexp/index',\n        prettify: './vendor/prettify/prettify',\n        semver: './vendor/semver.min',\n        utilsSampleRequest: './utils/send_sample_request',\n        webfontloader: './vendor/webfontloader',\n        list: './vendor/list.min'\n    },\n    shim: {\n        bootstrap: {\n            deps: ['jquery']\n        },\n        diffMatchPatch: {\n            exports: 'diff_match_patch'\n        },\n        handlebars: {\n            exports: 'Handlebars'\n        },\n        handlebarsExtended: {\n            deps: ['jquery', 'handlebars'],\n            exports: 'Handlebars'\n        },\n        prettify: {\n            exports: 'prettyPrint'\n        }\n    },\n    urlArgs: 'v=' + (new Date()).getTime(),\n    waitSeconds: 15\n});\n\nrequire([\n    'jquery',\n    'lodash',\n    'locales',\n    'handlebarsExtended',\n    './api_project.js',\n    './api_data.js',\n    'prettify',\n    'utilsSampleRequest',\n    'semver',\n    'webfontloader',\n    'bootstrap',\n    'pathToRegexp',\n    'list'\n], function($, _, locale, Handlebars, apiProject, apiData, prettyPrint, sampleRequest, semver, WebFont) {\n\n    // load google web fonts\n    loadGoogleFontCss();\n\n    var api = apiData.api;\n\n    //\n    // Templates\n    //\n    var templateHeader         = Handlebars.compile( $('#template-header').html() );\n    var templateFooter         = Handlebars.compile( $('#template-footer').html() );\n    var templateArticle        = Handlebars.compile( $('#template-article').html() );\n    var templateCompareArticle = Handlebars.compile( $('#template-compare-article').html() );\n    var templateGenerator      = Handlebars.compile( $('#template-generator').html() );\n    var templateProject        = Handlebars.compile( $('#template-project').html() );\n    var templateSections       = Handlebars.compile( $('#template-sections').html() );\n    var templateSidenav        = Handlebars.compile( $('#template-sidenav').html() );\n\n    //\n    // apiProject defaults\n    //\n    if ( ! apiProject.template)\n        apiProject.template = {};\n\n    if (apiProject.template.withCompare == null)\n        apiProject.template.withCompare = true;\n\n    if (apiProject.template.withGenerator == null)\n        apiProject.template.withGenerator = true;\n\n    if (apiProject.template.forceLanguage)\n        locale.setLanguage(apiProject.template.forceLanguage);\n\n    // Setup jQuery Ajax\n    $.ajaxSetup(apiProject.template.jQueryAjaxSetup);\n\n    //\n    // Data transform\n    //\n    // grouped by group\n    var apiByGroup = _.groupBy(api, function(entry) {\n        return entry.group;\n    });\n\n    // grouped by group and name\n    var apiByGroupAndName = {};\n    $.each(apiByGroup, function(index, entries) {\n        apiByGroupAndName[index] = _.groupBy(entries, function(entry) {\n            return entry.name;\n        });\n    });\n\n    //\n    // sort api within a group by title ASC and custom order\n    //\n    var newList = [];\n    var umlauts = { 'ä': 'ae', 'ü': 'ue', 'ö': 'oe', 'ß': 'ss' }; // TODO: remove in version 1.0\n    $.each (apiByGroupAndName, function(index, groupEntries) {\n        // get titles from the first entry of group[].name[] (name has versioning)\n        var titles = [];\n        $.each (groupEntries, function(titleName, entries) {\n            var title = entries[0].title;\n            if(title !== undefined) {\n                title.toLowerCase().replace(/[äöüß]/g, function($0) { return umlauts[$0]; });\n                titles.push(title + '#~#' + titleName); // '#~#' keep reference to titleName after sorting\n            }\n        });\n        // sort by name ASC\n        titles.sort();\n\n        // custom order\n        if (apiProject.order)\n            titles = sortByOrder(titles, apiProject.order, '#~#');\n\n        // add single elements to the new list\n        titles.forEach(function(name) {\n            var values = name.split('#~#');\n            var key = values[1];\n            groupEntries[key].forEach(function(entry) {\n                newList.push(entry);\n            });\n        });\n    });\n    // api overwrite with ordered list\n    api = newList;\n\n    //\n    // Group- and Versionlists\n    //\n    var apiGroups = {};\n    var apiGroupTitles = {};\n    var apiVersions = {};\n    apiVersions[apiProject.version] = 1;\n\n    $.each(api, function(index, entry) {\n        apiGroups[entry.group] = 1;\n        apiGroupTitles[entry.group] = entry.groupTitle || entry.group;\n        apiVersions[entry.version] = 1;\n    });\n\n    // sort groups\n    apiGroups = Object.keys(apiGroups);\n    apiGroups.sort();\n\n    // custom order\n    if (apiProject.order)\n        apiGroups = sortByOrder(apiGroups, apiProject.order);\n\n    // sort versions DESC\n    apiVersions = Object.keys(apiVersions);\n    apiVersions.sort(semver.compare);\n    apiVersions.reverse();\n\n    //\n    // create Navigationlist\n    //\n    var nav = [];\n    apiGroups.forEach(function(group) {\n        // Mainmenu entry\n        nav.push({\n            group: group,\n            isHeader: true,\n            title: apiGroupTitles[group]\n        });\n\n        // Submenu\n        var oldName = '';\n        api.forEach(function(entry) {\n            if (entry.group === group) {\n                if (oldName !== entry.name) {\n                    nav.push({\n                        title: entry.title,\n                        group: group,\n                        name: entry.name,\n                        type: entry.type,\n                        version: entry.version\n                    });\n                } else {\n                    nav.push({\n                        title: entry.title,\n                        group: group,\n                        hidden: true,\n                        name: entry.name,\n                        type: entry.type,\n                        version: entry.version\n                    });\n                }\n                oldName = entry.name;\n            }\n        });\n    });\n\n    /**\n     * Add navigation items by analyzing the HTML content and searching for h1 and h2 tags\n     * @param nav Object the navigation array\n     * @param content string the compiled HTML content\n     * @param index where to insert items\n     * @return boolean true if any good-looking (i.e. with a group identifier) <h1> tag was found\n     */\n    function add_nav(nav, content, index) {\n        var found_level1 = false;\n        if ( ! content) {\n          return found_level1;\n        }\n        var topics = content.match(/<h(1|2).*?>(.+?)<\\/h(1|2)>/gi);\n        if ( topics ) {\n          topics.forEach(function(entry) {\n              var level = entry.substring(2,3);\n              var title = entry.replace(/<.+?>/g, '');    // Remove all HTML tags for the title\n              var entry_tags = entry.match(/id=\"api-([^\\-]+)(?:-(.+))?\"/);    // Find the group and name in the id property\n              var group = (entry_tags ? entry_tags[1] : null);\n              var name = (entry_tags ? entry_tags[2] : null);\n              if (level==1 && title && group)  {\n                  nav.splice(index, 0, {\n                      group: group,\n                      isHeader: true,\n                      title: title,\n                      isFixed: true\n                  });\n                  index++;\n                  found_level1 = true;\n              }\n              if (level==2 && title && group && name)    {\n                  nav.splice(index, 0, {\n                      group: group,\n                      name: name,\n                      isHeader: false,\n                      title: title,\n                      isFixed: false,\n                      version: '1.0'\n                  });\n                  index++;\n              }\n          });\n        }\n        return found_level1;\n    }\n\n    // Mainmenu Header entry\n    if (apiProject.header) {\n        var found_level1 = add_nav(nav, apiProject.header.content, 0); // Add level 1 and 2 titles\n        if (!found_level1) {    // If no Level 1 tags were found, make a title\n            nav.unshift({\n                group: '_',\n                isHeader: true,\n                title: (apiProject.header.title == null) ? locale.__('General') : apiProject.header.title,\n                isFixed: true\n            });\n        }\n    }\n\n    // Mainmenu Footer entry\n    if (apiProject.footer) {\n        var last_nav_index = nav.length;\n        var found_level1 = add_nav(nav, apiProject.footer.content, nav.length); // Add level 1 and 2 titles\n        if (!found_level1 && apiProject.footer.title != null) {    // If no Level 1 tags were found, make a title\n            nav.splice(last_nav_index, 0, {\n                group: '_footer',\n                isHeader: true,\n                title: apiProject.footer.title,\n                isFixed: true\n            });\n        }\n    }\n\n    // render pagetitle\n    var title = apiProject.title ? apiProject.title : 'apiDoc: ' + apiProject.name + ' - ' + apiProject.version;\n    $(document).attr('title', title);\n\n    // remove loader\n    $('#loader').remove();\n\n    // render sidenav\n    var fields = {\n        nav: nav\n    };\n    $('#sidenav').append( templateSidenav(fields) );\n\n    // render Generator\n    $('#generator').append( templateGenerator(apiProject) );\n\n    // render Project\n    _.extend(apiProject, { versions: apiVersions});\n    $('#project').append( templateProject(apiProject) );\n\n    // render apiDoc, header/footer documentation\n    if (apiProject.header)\n        $('#header').append( templateHeader(apiProject.header) );\n\n    if (apiProject.footer)\n        $('#footer').append( templateFooter(apiProject.footer) );\n\n    //\n    // Render Sections and Articles\n    //\n    var articleVersions = {};\n    var content = '';\n    apiGroups.forEach(function(groupEntry) {\n        var articles = [];\n        var oldName = '';\n        var fields = {};\n        var title = groupEntry;\n        var description = '';\n        articleVersions[groupEntry] = {};\n\n        // render all articles of a group\n        api.forEach(function(entry) {\n            if(groupEntry === entry.group) {\n                if (oldName !== entry.name) {\n                    // determine versions\n                    api.forEach(function(versionEntry) {\n                        if (groupEntry === versionEntry.group && entry.name === versionEntry.name) {\n                            if ( ! articleVersions[entry.group].hasOwnProperty(entry.name) ) {\n                                articleVersions[entry.group][entry.name] = [];\n                            }\n                            articleVersions[entry.group][entry.name].push(versionEntry.version);\n                        }\n                    });\n                    fields = {\n                        article: entry,\n                        versions: articleVersions[entry.group][entry.name]\n                    };\n                } else {\n                    fields = {\n                        article: entry,\n                        hidden: true,\n                        versions: articleVersions[entry.group][entry.name]\n                    };\n                }\n\n                // add prefix URL for endpoint\n                if (apiProject.url)\n                    fields.article.url = apiProject.url + fields.article.url;\n\n                addArticleSettings(fields, entry);\n\n                if (entry.groupTitle)\n                    title = entry.groupTitle;\n\n                // TODO: make groupDescription compareable with older versions (not important for the moment)\n                if (entry.groupDescription)\n                    description = entry.groupDescription;\n\n                articles.push({\n                    article: templateArticle(fields),\n                    group: entry.group,\n                    name: entry.name\n                });\n                oldName = entry.name;\n            }\n        });\n\n        // render Section with Articles\n        var fields = {\n            group: groupEntry,\n            title: title,\n            description: description,\n            articles: articles\n        };\n        content += templateSections(fields);\n    });\n    $('#sections').append( content );\n\n    // Bootstrap Scrollspy\n    $(this).scrollspy({ target: '#scrollingNav', offset: 18 });\n\n    // Content-Scroll on Navigation click.\n    $('.sidenav').find('a').on('click', function(e) {\n        e.preventDefault();\n        var id = $(this).attr('href');\n        if ($(id).length > 0)\n            $('html,body').animate({ scrollTop: parseInt($(id).offset().top) }, 400);\n        window.location.hash = $(this).attr('href');\n    });\n\n    // Quickjump on Pageload to hash position.\n    if(window.location.hash) {\n        var id = window.location.hash;\n        if ($(id).length > 0)\n            $('html,body').animate({ scrollTop: parseInt($(id).offset().top) }, 0);\n    }\n\n    /**\n     * Check if Parameter (sub) List has a type Field.\n     * Example: @apiSuccess          varname1 No type.\n     *          @apiSuccess {String} varname2 With type.\n     *\n     * @param {Object} fields\n     */\n    function _hasTypeInFields(fields) {\n        var result = false;\n        $.each(fields, function(name) {\n            result = result || _.some(fields[name], function(item) { return item.type; });\n        });\n        return result;\n    }\n\n    /**\n     * On Template changes, recall plugins.\n     */\n    function initDynamic() {\n        // Bootstrap popover\n        $('button[data-toggle=\"popover\"]').popover().click(function(e) {\n            e.preventDefault();\n        });\n\n        var version = $('#version strong').html();\n        $('#sidenav li').removeClass('is-new');\n        if (apiProject.template.withCompare) {\n            $('#sidenav li[data-version=\\'' + version + '\\']').each(function(){\n                var group = $(this).data('group');\n                var name = $(this).data('name');\n                var length = $('#sidenav li[data-group=\\'' + group + '\\'][data-name=\\'' + name + '\\']').length;\n                var index  = $('#sidenav li[data-group=\\'' + group + '\\'][data-name=\\'' + name + '\\']').index($(this));\n                if (length === 1 || index === (length - 1))\n                    $(this).addClass('is-new');\n            });\n        }\n\n        // tabs\n        $('.nav-tabs-examples a').click(function (e) {\n            e.preventDefault();\n            $(this).tab('show');\n        });\n        $('.nav-tabs-examples').find('a:first').tab('show');\n\n        // sample request switch\n        $('.sample-request-switch').click(function (e) {\n            var name = '.' + $(this).attr('name') + '-fields';\n            $(name).addClass('hide');\n            $(this).parent().next(name).removeClass('hide');\n        });\n\n        // call scrollspy refresh method\n        $(window).scrollspy('refresh');\n\n        // init modules\n        sampleRequest.initDynamic();\n    }\n    initDynamic();\n\n    // Pre- / Code-Format\n    prettyPrint();\n\n    //\n    // HTML-Template specific jQuery-Functions\n    //\n    // Change Main Version\n    $('#versions li.version a').on('click', function(e) {\n        e.preventDefault();\n\n        var selectedVersion = $(this).html();\n        $('#version strong').html(selectedVersion);\n\n        // hide all\n        $('article').addClass('hide');\n        $('#sidenav li:not(.nav-fixed)').addClass('hide');\n\n        // show 1st equal or lower Version of each entry\n        $('article[data-version]').each(function(index) {\n            var group = $(this).data('group');\n            var name = $(this).data('name');\n            var version = $(this).data('version');\n\n            if (semver.lte(version, selectedVersion)) {\n                if ($('article[data-group=\\'' + group + '\\'][data-name=\\'' + name + '\\']:visible').length === 0) {\n                    // enable Article\n                    $('article[data-group=\\'' + group + '\\'][data-name=\\'' + name + '\\'][data-version=\\'' + version + '\\']').removeClass('hide');\n                    // enable Navigation\n                    $('#sidenav li[data-group=\\'' + group + '\\'][data-name=\\'' + name + '\\'][data-version=\\'' + version + '\\']').removeClass('hide');\n                    $('#sidenav li.nav-header[data-group=\\'' + group + '\\']').removeClass('hide');\n                }\n            }\n        });\n\n        // show 1st equal or lower Version of each entry\n        $('article[data-version]').each(function(index) {\n            var group = $(this).data('group');\n            $('section#api-' + group).removeClass('hide');\n            if ($('section#api-' + group + ' article:visible').length === 0) {\n                $('section#api-' + group).addClass('hide');\n            } else {\n                $('section#api-' + group).removeClass('hide');\n            }\n        });\n\n        initDynamic();\n        return;\n    });\n\n    // compare all article with their predecessor\n    $('#compareAllWithPredecessor').on('click', changeAllVersionCompareTo);\n\n    // change version of an article\n    $('article .versions li.version a').on('click', changeVersionCompareTo);\n\n    // compare url-parameter\n    $.urlParam = function(name) {\n        var results = new RegExp('[\\\\?&amp;]' + name + '=([^&amp;#]*)').exec(window.location.href);\n        return (results && results[1]) ? results[1] : null;\n    };\n\n    if ($.urlParam('compare')) {\n        // URL Paramter ?compare=1 is set\n        $('#compareAllWithPredecessor').trigger('click');\n\n        if (window.location.hash) {\n            var id = window.location.hash;\n            $('html,body').animate({ scrollTop: parseInt($(id).offset().top) - 18 }, 0);\n        }\n    }\n\n    /**\n     * Initialize search\n     */\n    var options = {\n      valueNames: [ 'nav-list-item' ]\n    };\n    var endpointsList = new List('scrollingNav', options);\n\n    /**\n     * Set initial focus to search input\n     */\n    $('#scrollingNav .sidenav-search input.search').focus();\n\n    /**\n     * Detect ESC key to reset search\n     */\n    $(document).keyup(function(e) {\n      if (e.keyCode === 27) $('span.search-reset').click();\n    });\n\n    /**\n     * Search reset\n     */\n    $('span.search-reset').on('click', function() {\n      $('#scrollingNav .sidenav-search input.search')\n        .val(\"\")\n        .focus()\n      ;\n      endpointsList.search();\n    });\n\n    /**\n     * Change version of an article to compare it to an other version.\n     */\n    function changeVersionCompareTo(e) {\n        e.preventDefault();\n\n        var $root = $(this).parents('article');\n        var selectedVersion = $(this).html();\n        var $button = $root.find('.version');\n        var currentVersion = $button.find('strong').html();\n        $button.find('strong').html(selectedVersion);\n\n        var group = $root.data('group');\n        var name = $root.data('name');\n        var version = $root.data('version');\n\n        var compareVersion = $root.data('compare-version');\n\n        if (compareVersion === selectedVersion)\n            return;\n\n        if ( ! compareVersion && version == selectedVersion)\n            return;\n\n        if (compareVersion && articleVersions[group][name][0] === selectedVersion || version === selectedVersion) {\n            // the version of the entry is set to the highest version (reset)\n            resetArticle(group, name, version);\n        } else {\n            var $compareToArticle = $('article[data-group=\\'' + group + '\\'][data-name=\\'' + name + '\\'][data-version=\\'' + selectedVersion + '\\']');\n\n            var sourceEntry = {};\n            var compareEntry = {};\n            $.each(apiByGroupAndName[group][name], function(index, entry) {\n                if (entry.version === version)\n                    sourceEntry = entry;\n                if (entry.version === selectedVersion)\n                    compareEntry = entry;\n            });\n\n            var fields = {\n                article: sourceEntry,\n                compare: compareEntry,\n                versions: articleVersions[group][name]\n            };\n\n            // add unique id\n            // TODO: replace all group-name-version in template with id.\n            fields.article.id = fields.article.group + '-' + fields.article.name + '-' + fields.article.version;\n            fields.article.id = fields.article.id.replace(/\\./g, '_');\n\n            fields.compare.id = fields.compare.group + '-' + fields.compare.name + '-' + fields.compare.version;\n            fields.compare.id = fields.compare.id.replace(/\\./g, '_');\n\n            var entry = sourceEntry;\n            if (entry.parameter && entry.parameter.fields)\n                fields._hasTypeInParameterFields = _hasTypeInFields(entry.parameter.fields);\n\n            if (entry.error && entry.error.fields)\n                fields._hasTypeInErrorFields = _hasTypeInFields(entry.error.fields);\n\n            if (entry.success && entry.success.fields)\n                fields._hasTypeInSuccessFields = _hasTypeInFields(entry.success.fields);\n\n            if (entry.info && entry.info.fields)\n                fields._hasTypeInInfoFields = _hasTypeInFields(entry.info.fields);\n\n            var entry = compareEntry;\n            if (fields._hasTypeInParameterFields !== true && entry.parameter && entry.parameter.fields)\n                fields._hasTypeInParameterFields = _hasTypeInFields(entry.parameter.fields);\n\n            if (fields._hasTypeInErrorFields !== true && entry.error && entry.error.fields)\n                fields._hasTypeInErrorFields = _hasTypeInFields(entry.error.fields);\n\n            if (fields._hasTypeInSuccessFields !== true && entry.success && entry.success.fields)\n                fields._hasTypeInSuccessFields = _hasTypeInFields(entry.success.fields);\n\n            if (fields._hasTypeInInfoFields !== true && entry.info && entry.info.fields)\n                fields._hasTypeInInfoFields = _hasTypeInFields(entry.info.fields);\n\n            var content = templateCompareArticle(fields);\n            $root.after(content);\n            var $content = $root.next();\n\n            // Event on.click re-assign\n            $content.find('.versions li.version a').on('click', changeVersionCompareTo);\n\n            // select navigation\n            $('#sidenav li[data-group=\\'' + group + '\\'][data-name=\\'' + name + '\\'][data-version=\\'' + currentVersion + '\\']').addClass('has-modifications');\n\n            $root.remove();\n            // TODO: on change main version or select the highest version re-render\n        }\n\n        initDynamic();\n    }\n\n    /**\n     * Compare all currently selected Versions with their predecessor.\n     */\n    function changeAllVersionCompareTo(e) {\n        e.preventDefault();\n        $('article:visible .versions').each(function(){\n            var $root = $(this).parents('article');\n            var currentVersion = $root.data('version');\n            var $foundElement = null;\n            $(this).find('li.version a').each(function() {\n                var selectVersion = $(this).html();\n                if (selectVersion < currentVersion && ! $foundElement)\n                    $foundElement = $(this);\n            });\n\n            if($foundElement)\n                $foundElement.trigger('click');\n        });\n        initDynamic();\n    }\n\n    /**\n     * Sort the fields.\n     */\n    function sortFields(fields_object) {\n        $.each(fields_object, function (key, fields) {\n\n            var reversed = fields.slice().reverse()\n\n            var max_dot_count = Math.max.apply(null, reversed.map(function (item) {\n                return item.field.split(\".\").length - 1;\n            }))\n\n            for (var dot_count = 1; dot_count <= max_dot_count; dot_count++) {\n                reversed.forEach(function (item, index) {\n                    var parts = item.field.split(\".\");\n                    if (parts.length - 1 == dot_count) {\n                        var fields_names = fields.map(function (item) { return item.field; });\n                        if (parts.slice(1).length  >= 1) {\n                            var prefix = parts.slice(0, parts.length - 1).join(\".\");\n                            var prefix_index = fields_names.indexOf(prefix);\n                            if (prefix_index > -1) {\n                                fields.splice(fields_names.indexOf(item.field), 1);\n                                fields.splice(prefix_index + 1, 0, item);\n                            }\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Add article settings.\n     */\n    function addArticleSettings(fields, entry) {\n        // add unique id\n        // TODO: replace all group-name-version in template with id.\n        fields.id = fields.article.group + '-' + fields.article.name + '-' + fields.article.version;\n        fields.id = fields.id.replace(/\\./g, '_');\n\n        if (entry.header && entry.header.fields) {\n            sortFields(entry.header.fields);\n            fields._hasTypeInHeaderFields = _hasTypeInFields(entry.header.fields);\n        }\n\n        if (entry.parameter && entry.parameter.fields) {\n            sortFields(entry.parameter.fields);\n            fields._hasTypeInParameterFields = _hasTypeInFields(entry.parameter.fields);\n        }\n\n        if (entry.error && entry.error.fields) {\n            sortFields(entry.error.fields);\n            fields._hasTypeInErrorFields = _hasTypeInFields(entry.error.fields);\n        }\n\n        if (entry.success && entry.success.fields) {\n            sortFields(entry.success.fields);\n            fields._hasTypeInSuccessFields = _hasTypeInFields(entry.success.fields);\n        }\n\n        if (entry.info && entry.info.fields) {\n            sortFields(entry.info.fields);\n            fields._hasTypeInInfoFields = _hasTypeInFields(entry.info.fields);\n        }\n\n        // add template settings\n        fields.template = apiProject.template;\n    }\n\n    /**\n     * Render Article.\n     */\n    function renderArticle(group, name, version) {\n        var entry = {};\n        $.each(apiByGroupAndName[group][name], function(index, currentEntry) {\n            if (currentEntry.version === version)\n                entry = currentEntry;\n        });\n        var fields = {\n            article: entry,\n            versions: articleVersions[group][name]\n        };\n\n        addArticleSettings(fields, entry);\n\n        return templateArticle(fields);\n    }\n\n    /**\n     * Render original Article and remove the current visible Article.\n     */\n    function resetArticle(group, name, version) {\n        var $root = $('article[data-group=\\'' + group + '\\'][data-name=\\'' + name + '\\']:visible');\n        var content = renderArticle(group, name, version);\n\n        $root.after(content);\n        var $content = $root.next();\n\n        // Event on.click muss neu zugewiesen werden (sollte eigentlich mit on automatisch funktionieren... sollte)\n        $content.find('.versions li.version a').on('click', changeVersionCompareTo);\n\n        $('#sidenav li[data-group=\\'' + group + '\\'][data-name=\\'' + name + '\\'][data-version=\\'' + version + '\\']').removeClass('has-modifications');\n\n        $root.remove();\n        return;\n    }\n\n    /**\n     * Load google fonts.\n     */\n    function loadGoogleFontCss() {\n        WebFont.load({\n            active: function() {\n                // Update scrollspy\n                $(window).scrollspy('refresh')\n            },\n            google: {\n                families: ['Source Code Pro', 'Source Sans Pro:n4,n6,n7']\n            }\n        });\n    }\n\n    /**\n     * Return ordered entries by custom order and append not defined entries to the end.\n     * @param  {String[]} elements\n     * @param  {String[]} order\n     * @param  {String}   splitBy\n     * @return {String[]} Custom ordered list.\n     */\n    function sortByOrder(elements, order, splitBy) {\n        var results = [];\n        order.forEach (function(name) {\n            if (splitBy)\n                elements.forEach (function(element) {\n                    var parts = element.split(splitBy);\n                    var key = parts[1]; // reference keep for sorting\n                    if (key == name)\n                        results.push(element);\n                });\n            else\n                elements.forEach (function(key) {\n                    if (key == name)\n                        results.push(name);\n                });\n        });\n        // Append all other entries that ar not defined in order\n        elements.forEach(function(element) {\n            if (results.indexOf(element) === -1)\n                results.push(element);\n        });\n        return results;\n    }\n\n});\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc/template/locales/ca.js":"define({\n    ca: {\n        'Allowed values:'             : 'Valors permesos:',\n        'Compare all with predecessor': 'Comparar tot amb versió anterior',\n        'compare changes to:'         : 'comparar canvis amb:',\n        'compared to'                 : 'comparat amb',\n        'Default value:'              : 'Valor per defecte:',\n        'Description'                 : 'Descripció',\n        'Field'                       : 'Camp',\n        'General'                     : 'General',\n        'Generated with'              : 'Generat amb',\n        'Name'                        : 'Nom',\n        'No response values.'         : 'Sense valors en la resposta.',\n        'optional'                    : 'opcional',\n        'Parameter'                   : 'Paràmetre',\n        'Permission:'                 : 'Permisos:',\n        'Response'                    : 'Resposta',\n        'Send'                        : 'Enviar',\n        'Send a Sample Request'       : 'Enviar una petició d\\'exemple',\n        'show up to version:'         : 'mostrar versió:',\n        'Size range:'                 : 'Tamany de rang:',\n        'Type'                        : 'Tipus',\n        'url'                         : 'url'\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc/template/locales/de.js":"define({\n    de: {\n        'Allowed values:'             : 'Erlaubte Werte:',\n        'Compare all with predecessor': 'Vergleiche alle mit ihren Vorgängern',\n        'compare changes to:'         : 'vergleiche Änderungen mit:',\n        'compared to'                 : 'verglichen mit',\n        'Default value:'              : 'Standardwert:',\n        'Description'                 : 'Beschreibung',\n        'Field'                       : 'Feld',\n        'General'                     : 'Allgemein',\n        'Generated with'              : 'Erstellt mit',\n        'Name'                        : 'Name',\n        'No response values.'         : 'Keine Rückgabewerte.',\n        'optional'                    : 'optional',\n        'Parameter'                   : 'Parameter',\n        'Permission:'                 : 'Berechtigung:',\n        'Response'                    : 'Antwort',\n        'Send'                        : 'Senden',\n        'Send a Sample Request'       : 'Eine Beispielanfrage senden',\n        'show up to version:'         : 'zeige bis zur Version:',\n        'Size range:'                 : 'Größenbereich:',\n        'Type'                        : 'Typ',\n        'url'                         : 'url'\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc/template/locales/es.js":"define({\n    es: {\n        'Allowed values:'             : 'Valores permitidos:',\n        'Compare all with predecessor': 'Comparar todo con versión anterior',\n        'compare changes to:'         : 'comparar cambios con:',\n        'compared to'                 : 'comparado con',\n        'Default value:'              : 'Valor por defecto:',\n        'Description'                 : 'Descripción',\n        'Field'                       : 'Campo',\n        'General'                     : 'General',\n        'Generated with'              : 'Generado con',\n        'Name'                        : 'Nombre',\n        'No response values.'         : 'Sin valores en la respuesta.',\n        'optional'                    : 'opcional',\n        'Parameter'                   : 'Parámetro',\n        'Permission:'                 : 'Permisos:',\n        'Response'                    : 'Respuesta',\n        'Send'                        : 'Enviar',\n        'Send a Sample Request'       : 'Enviar una petición de ejemplo',\n        'show up to version:'         : 'mostrar a versión:',\n        'Size range:'                 : 'Tamaño de rango:',\n        'Type'                        : 'Tipo',\n        'url'                         : 'url'\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc/template/locales/fr.js":"define({\n    fr: {\n        'Allowed values:'             : 'Valeurs autorisées :',\n        'Compare all with predecessor': 'Tout comparer avec ...',\n        'compare changes to:'         : 'comparer les changements à :',\n        'compared to'                 : 'comparer à',\n        'Default value:'              : 'Valeur par défaut :',\n        'Description'                 : 'Description',\n        'Field'                       : 'Champ',\n        'General'                     : 'Général',\n        'Generated with'              : 'Généré avec',\n        'Name'                        : 'Nom',\n        'No response values.'         : 'Aucune valeur de réponse.',\n        'optional'                    : 'optionnel',\n        'Parameter'                   : 'Paramètre',\n        'Permission:'                 : 'Permission :',\n        'Response'                    : 'Réponse',\n        'Send'                        : 'Envoyer',\n        'Send a Sample Request'       : 'Envoyer une requête représentative',\n        'show up to version:'         : 'Montrer à partir de la version :',\n        'Size range:'                 : 'Ordre de grandeur :',\n        'Type'                        : 'Type',\n        'url'                         : 'url'\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc/template/locales/it.js":"define({\n    it: {\n        'Allowed values:'             : 'Valori permessi:',\n        'Compare all with predecessor': 'Confronta tutto con versioni precedenti',\n        'compare changes to:'         : 'confronta modifiche con:',\n        'compared to'                 : 'confrontato con',\n        'Default value:'              : 'Valore predefinito:',\n        'Description'                 : 'Descrizione',\n        'Field'                       : 'Campo',\n        'General'                     : 'Generale',\n        'Generated with'              : 'Creato con',\n        'Name'                        : 'Nome',\n        'No response values.'         : 'Nessun valore di risposta.',\n        'optional'                    : 'opzionale',\n        'Parameter'                   : 'Parametro',\n        'Permission:'                 : 'Permessi:',\n        'Response'                    : 'Risposta',\n        'Send'                        : 'Invia',\n        'Send a Sample Request'       : 'Invia una richiesta di esempio',\n        'show up to version:'         : 'mostra alla versione:',\n        'Size range:'                 : 'Intervallo dimensione:',\n        'Type'                        : 'Tipo',\n        'url'                         : 'url'\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc/template/locales/locale.js":"define([\n    './locales/ca.js',\n    './locales/de.js',\n    './locales/es.js',\n    './locales/fr.js',\n    './locales/it.js',\n    './locales/nl.js',\n    './locales/pl.js',\n    './locales/pt_br.js',\n    './locales/ro.js',\n    './locales/ru.js',\n    './locales/zh.js',\n    './locales/zh_cn.js'\n], function() {\n    var langId = (navigator.language || navigator.userLanguage).toLowerCase().replace('-', '_');\n    var language = langId.substr(0, 2);\n    var locales = {};\n\n    for (index in arguments) {\n        for (property in arguments[index])\n            locales[property] = arguments[index][property];\n    }\n    if ( ! locales['en'])\n        locales['en'] = {};\n\n    if ( ! locales[langId] && ! locales[language])\n        language = 'en';\n\n    var locale = (locales[langId] ? locales[langId] : locales[language]);\n\n    function __(text) {\n        var index = locale[text];\n        if (index === undefined)\n            return text;\n        return index;\n    };\n\n    function setLanguage(language) {\n        locale = locales[language];\n    }\n\n    return {\n        __         : __,\n        locales    : locales,\n        locale     : locale,\n        setLanguage: setLanguage\n    };\n});\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc/template/locales/nl.js":"define({\n    nl: {\n        'Allowed values:'             : 'Toegestane waarden:',\n        'Compare all with predecessor': 'Vergelijk alle met voorgaande versie',\n        'compare changes to:'         : 'vergelijk veranderingen met:',\n        'compared to'                 : 'vergelijk met',\n        'Default value:'              : 'Standaard waarde:',\n        'Description'                 : 'Omschrijving',\n        'Field'                       : 'Veld',\n        'General'                     : 'Algemeen',\n        'Generated with'              : 'Gegenereerd met',\n        'Name'                        : 'Naam',\n        'No response values.'         : 'Geen response waardes.',\n        'optional'                    : 'optioneel',\n        'Parameter'                   : 'Parameter',\n        'Permission:'                 : 'Permissie:',\n        'Response'                    : 'Antwoorden',\n        'Send'                        : 'Sturen',\n        'Send a Sample Request'       : 'Stuur een sample aanvragen',\n        'show up to version:'         : 'toon tot en met versie:',\n        'Size range:'                 : 'Maatbereik:',\n        'Type'                        : 'Type',\n        'url'                         : 'url'\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc/template/locales/pl.js":"define({\n    pl: {\n        'Allowed values:'             : 'Dozwolone wartości:',\n        'Compare all with predecessor': 'Porównaj z poprzednimi wersjami',\n        'compare changes to:'         : 'porównaj zmiany do:',\n        'compared to'                 : 'porównaj do:',\n        'Default value:'              : 'Wartość domyślna:',\n        'Description'                 : 'Opis',\n        'Field'                       : 'Pole',\n        'General'                     : 'Generalnie',\n        'Generated with'              : 'Wygenerowano z',\n        'Name'                        : 'Nazwa',\n        'No response values.'         : 'Brak odpowiedzi.',\n        'optional'                    : 'opcjonalny',\n        'Parameter'                   : 'Parametr',\n        'Permission:'                 : 'Uprawnienia:',\n        'Response'                    : 'Odpowiedź',\n        'Send'                        : 'Wyślij',\n        'Send a Sample Request'       : 'Wyślij przykładowe żądanie',\n        'show up to version:'         : 'pokaż do wersji:',\n        'Size range:'                 : 'Zakres rozmiaru:',\n        'Type'                        : 'Typ',\n        'url'                         : 'url'\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc/template/locales/pt_br.js":"define({\n    'pt_br': {\n        'Allowed values:'             : 'Valores permitidos:',\n        'Compare all with predecessor': 'Compare todos com antecessores',\n        'compare changes to:'         : 'comparar alterações com:',\n        'compared to'                 : 'comparado com',\n        'Default value:'              : 'Valor padrão:',\n        'Description'                 : 'Descrição',\n        'Field'                       : 'Campo',\n        'General'                     : 'Geral',\n        'Generated with'              : 'Gerado com',\n        'Name'                        : 'Nome',\n        'No response values.'         : 'Sem valores de resposta.',\n        'optional'                    : 'opcional',\n        'Parameter'                   : 'Parâmetro',\n        'Permission:'                 : 'Permissão:',\n        'Response'                    : 'Resposta',\n        'Send'                        : 'Enviar',\n        'Send a Sample Request'       : 'Enviar um Exemplo de Pedido',\n        'show up to version:'         : 'aparecer para a versão:',\n        'Size range:'                 : 'Faixa de tamanho:',\n        'Type'                        : 'Tipo',\n        'url'                         : 'url'\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc/template/locales/ro.js":"define({\n    ro: {\n        'Allowed values:'             : 'Valori permise:',\n        'Compare all with predecessor': 'Compară toate cu versiunea precedentă',\n        'compare changes to:'         : 'compară cu versiunea:',\n        'compared to'                 : 'comparat cu',\n        'Default value:'              : 'Valoare implicită:',\n        'Description'                 : 'Descriere',\n        'Field'                       : 'Câmp',\n        'General'                     : 'General',\n        'Generated with'              : 'Generat cu',\n        'Name'                        : 'Nume',\n        'No response values.'         : 'Nici o valoare returnată.',\n        'optional'                    : 'opțional',\n        'Parameter'                   : 'Parametru',\n        'Permission:'                 : 'Permisiune:',\n        'Response'                    : 'Răspuns',\n        'Send'                        : 'Trimite',\n        'Send a Sample Request'       : 'Trimite o cerere de probă',\n        'show up to version:'         : 'arată până la versiunea:',\n        'Size range:'                 : 'Interval permis:',\n        'Type'                        : 'Tip',\n        'url'                         : 'url'\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc/template/locales/ru.js":"define({\n    ru: {\n        'Allowed values:'             : 'Допустимые значения:',\n        'Compare all with predecessor': 'Сравнить с предыдущей версией',\n        'compare changes to:'         : 'сравнить с:',\n        'compared to'                 : 'в сравнении с',\n        'Default value:'              : 'По умолчанию:',\n        'Description'                 : 'Описание',\n        'Field'                       : 'Название',\n        'General'                     : 'Общая информация',\n        'Generated with'              : 'Сгенерировано с помощью',\n        'Name'                        : 'Название',\n        'No response values.'         : 'Нет значений для ответа.',\n        'optional'                    : 'необязательный',\n        'Parameter'                   : 'Параметр',\n        'Permission:'                 : 'Разрешено:',\n        'Response'                    : 'Ответ',\n        'Send'                        : 'Отправить',\n        'Send a Sample Request'       : 'Отправить тестовый запрос',\n        'show up to version:'         : 'показать версию:',\n        'Size range:'                 : 'Ограничения:',\n        'Type'                        : 'Тип',\n        'url'                         : 'URL'\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc/template/locales/zh_cn.js":"define({\n    'zh_cn': {\n        'Allowed values:'             : '允许值:',\n        'Compare all with predecessor': '与所有较早的比较',\n        'compare changes to:'         : '将当前版本与指定版本比较:',\n        'compared to'                 : '相比于',\n        'Default value:'              : '默认值:',\n        'Description'                 : '描述',\n        'Field'                       : '字段',\n        'General'                     : '概要',\n        'Generated with'              : '基于',\n        'Name'                        : '名称',\n        'No response values.'         : '无返回值.',\n        'optional'                    : '可选',\n        'Parameter'                   : '参数',\n        'Permission:'                 : '权限:',\n        'Response'                    : '返回',\n        'Send'                        : '发送',\n        'Send a Sample Request'       : '发送示例请求',\n        'show up to version:'         : '显示到指定版本:',\n        'Size range:'                 : '取值范围:',\n        'Type'                        : '类型',\n        'url'                         : '网址'\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc/template/locales/zh.js":"define({\n    zh: {\n        'Allowed values​​:'             : '允許值:',\n        'Compare all with predecessor': '預先比較所有',\n        'compare changes to:'         : '比較變更:',\n        'compared to'                 : '對比',\n        'Default value:'              : '默認值:',\n        'Description'                 : '描述',\n        'Field'                       : '字段',\n        'General'                     : '概括',\n        'Generated with'              : '生成工具',\n        'Name'                        : '名稱',\n        'No response values​​.'         : '無對應資料.',\n        'optional'                    : '選項',\n        'Parameter'                   : '參數',\n        'Permission:'                 : '允許:',\n        'Response'                    : '回應',\n        'Send'                        : '發送',\n        'Send a Sample Request'       : '發送試用需求',\n        'show up to version:'         : '顯示到版本:',\n        'Size range:'                 : '尺寸範圍:',\n        'Type'                        : '類型',\n        'url'                         : '網址'\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc/template/utils/handlebars_helper.js":"define([\n    'locales',\n    'handlebars',\n    'diffMatchPatch'\n], function(locale, Handlebars, DiffMatchPatch) {\n\n    /**\n     * Return a text as markdown.\n     * Currently only a little helper to replace apidoc-inline Links (#Group:Name).\n     * Should be replaced with a full markdown lib.\n     * @param string text\n     */\n    Handlebars.registerHelper('markdown', function(text) {\n        if ( ! text ) {\n          return text;\n        }\n        text = text.replace(/((\\[(.*?)\\])?\\(#)((.+?):(.+?))(\\))/mg, function(match, p1, p2, p3, p4, p5, p6) {\n          var link = p3 || p5 + '/' + p6;\n          return '<a href=\"#api-' + p5 + '-' + p6 + '\">' + link + '</a>';\n        });\n        return text;\n    });\n\n    /**\n     * start/stop timer for simple performance check.\n     */\n    var timer;\n    Handlebars.registerHelper('startTimer', function(text) {\n        timer = new Date();\n        return '';\n    });\n\n    Handlebars.registerHelper('stopTimer', function(text) {\n        console.log(new Date() - timer);\n        return '';\n    });\n\n    /**\n     * Return localized Text.\n     * @param string text\n     */\n    Handlebars.registerHelper('__', function(text) {\n        return locale.__(text);\n    });\n\n    /**\n     * Console log.\n     * @param mixed obj\n     */\n    Handlebars.registerHelper('cl', function(obj) {\n        console.log(obj);\n        return '';\n    });\n\n    /**\n     * Replace underscore with space.\n     * @param string text\n     */\n    Handlebars.registerHelper('underscoreToSpace', function(text) {\n        return text.replace(/(_+)/g, ' ');\n    });\n\n    /**\n     *\n     */\n    Handlebars.registerHelper('assign', function(name) {\n        if(arguments.length > 0) {\n            var type = typeof(arguments[1]);\n            var arg = null;\n            if(type === 'string' || type === 'number' || type === 'boolean') arg = arguments[1];\n            Handlebars.registerHelper(name, function() { return arg; });\n        }\n        return '';\n    });\n\n    /**\n     *\n     */\n    Handlebars.registerHelper('nl2br', function(text) {\n        return _handlebarsNewlineToBreak(text);\n    });\n\n    /**\n     *\n     */\n    Handlebars.registerHelper('if_eq', function(context, options) {\n        var compare = context;\n        // Get length if context is an object\n        if (context instanceof Object && ! (options.hash.compare instanceof Object))\n             compare = Object.keys(context).length;\n\n        if (compare === options.hash.compare)\n            return options.fn(this);\n\n        return options.inverse(this);\n    });\n\n    /**\n     *\n     */\n    Handlebars.registerHelper('if_gt', function(context, options) {\n        var compare = context;\n        // Get length if context is an object\n        if (context instanceof Object && ! (options.hash.compare instanceof Object))\n             compare = Object.keys(context).length;\n\n        if(compare > options.hash.compare)\n            return options.fn(this);\n\n        return options.inverse(this);\n    });\n\n    /**\n     *\n     */\n    var templateCache = {};\n    Handlebars.registerHelper('subTemplate', function(name, sourceContext) {\n        if ( ! templateCache[name])\n            templateCache[name] = Handlebars.compile($('#template-' + name).html());\n\n        var template = templateCache[name];\n        var templateContext = $.extend({}, this, sourceContext.hash);\n        return new Handlebars.SafeString( template(templateContext) );\n    });\n\n    /**\n     *\n     */\n    Handlebars.registerHelper('toLowerCase', function(value) {\n        return (value && typeof value === 'string') ? value.toLowerCase() : '';\n    });\n\n    /**\n     *\n     */\n    Handlebars.registerHelper('splitFill', function(value, splitChar, fillChar) {\n        var splits = value.split(splitChar);\n        return new Array(splits.length).join(fillChar) + splits[splits.length - 1];\n    });\n\n    /**\n     * Convert Newline to HTML-Break (nl2br).\n     *\n     * @param {String} text\n     * @returns {String}\n     */\n    function _handlebarsNewlineToBreak(text) {\n        return ('' + text).replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1' + '<br>' + '$2');\n    }\n\n    /**\n     *\n     */\n    Handlebars.registerHelper('each_compare_list_field', function(source, compare, options) {\n        var fieldName = options.hash.field;\n        var newSource = [];\n        if (source) {\n            source.forEach(function(entry) {\n                var values = entry;\n                values['key'] = entry[fieldName];\n                newSource.push(values);\n            });\n        }\n\n        var newCompare = [];\n        if (compare) {\n            compare.forEach(function(entry) {\n                var values = entry;\n                values['key'] = entry[fieldName];\n                newCompare.push(values);\n            });\n        }\n        return _handlebarsEachCompared('key', newSource, newCompare, options);\n    });\n\n    /**\n     *\n     */\n    Handlebars.registerHelper('each_compare_keys', function(source, compare, options) {\n        var newSource = [];\n        if (source) {\n            var sourceFields = Object.keys(source);\n            sourceFields.forEach(function(name) {\n                var values = {};\n                values['value'] = source[name];\n                values['key'] = name;\n                newSource.push(values);\n            });\n        }\n\n        var newCompare = [];\n        if (compare) {\n            var compareFields = Object.keys(compare);\n            compareFields.forEach(function(name) {\n                var values = {};\n                values['value'] = compare[name];\n                values['key'] = name;\n                newCompare.push(values);\n            });\n        }\n        return _handlebarsEachCompared('key', newSource, newCompare, options);\n    });\n\n    /**\n     *\n     */\n    Handlebars.registerHelper('each_compare_field', function(source, compare, options) {\n        return _handlebarsEachCompared('field', source, compare, options);\n    });\n\n    /**\n     *\n     */\n    Handlebars.registerHelper('each_compare_title', function(source, compare, options) {\n        return _handlebarsEachCompared('title', source, compare, options);\n    });\n\n    /**\n     *\n     */\n    Handlebars.registerHelper('reformat', function(source, type){\n        if (type == 'json')\n            try {\n               return JSON.stringify(JSON.parse(source.trim()),null, \"    \");\n            } catch(e) {\n\n            }\n        return source\n    });\n\n    /**\n     *\n     */\n    Handlebars.registerHelper('showDiff', function(source, compare, options) {\n        var ds = '';\n        if(source === compare) {\n            ds = source;\n        } else {\n            if( ! source)\n                return compare;\n\n            if( ! compare)\n                return source;\n\n            var d = diffMatchPatch.diff_main(compare, source);\n            diffMatchPatch.diff_cleanupSemantic(d);\n            ds = diffMatchPatch.diff_prettyHtml(d);\n            ds = ds.replace(/&para;/gm, '');\n        }\n        if(options === 'nl2br')\n            ds = _handlebarsNewlineToBreak(ds);\n\n        return ds;\n    });\n\n    /**\n     *\n     */\n    function _handlebarsEachCompared(fieldname, source, compare, options)\n    {\n        var dataList = [];\n        var index = 0;\n        if(source) {\n            source.forEach(function(sourceEntry) {\n                var found = false;\n                if (compare) {\n                    compare.forEach(function(compareEntry) {\n                        if(sourceEntry[fieldname] === compareEntry[fieldname]) {\n                            var data = {\n                                typeSame: true,\n                                source: sourceEntry,\n                                compare: compareEntry,\n                                index: index\n                            };\n                            dataList.push(data);\n                            found = true;\n                            index++;\n                        }\n                    });\n                }\n                if ( ! found) {\n                    var data = {\n                        typeIns: true,\n                        source: sourceEntry,\n                        index: index\n                    };\n                    dataList.push(data);\n                    index++;\n                }\n            });\n        }\n\n        if (compare) {\n            compare.forEach(function(compareEntry) {\n                var found = false;\n                if (source) {\n                    source.forEach(function(sourceEntry) {\n                        if(sourceEntry[fieldname] === compareEntry[fieldname])\n                            found = true;\n                    });\n                }\n                if ( ! found) {\n                    var data = {\n                        typeDel: true,\n                        compare: compareEntry,\n                        index: index\n                    };\n                    dataList.push(data);\n                    index++;\n                }\n            });\n        }\n\n        var ret = '';\n        var length = dataList.length;\n        for (var index in dataList) {\n            if(index == (length - 1))\n                dataList[index]['_last'] = true;\n            ret = ret + options.fn(dataList[index]);\n        }\n        return ret;\n    }\n\n    var diffMatchPatch = new DiffMatchPatch();\n\n    /**\n     * Overwrite Colors\n     */\n    DiffMatchPatch.prototype.diff_prettyHtml = function(diffs) {\n      var html = [];\n      var pattern_amp = /&/g;\n      var pattern_lt = /</g;\n      var pattern_gt = />/g;\n      var pattern_para = /\\n/g;\n      for (var x = 0; x < diffs.length; x++) {\n        var op = diffs[x][0];    // Operation (insert, delete, equal)\n        var data = diffs[x][1];  // Text of change.\n        var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n            .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n        switch (op) {\n          case DIFF_INSERT:\n            html[x] = '<ins>' + text + '</ins>';\n            break;\n          case DIFF_DELETE:\n            html[x] = '<del>' + text + '</del>';\n            break;\n          case DIFF_EQUAL:\n            html[x] = '<span>' + text + '</span>';\n            break;\n        }\n      }\n      return html.join('');\n    };\n\n    // Exports\n    return Handlebars;\n});\n","/home/travis/build/npmtest/node-npmtest-apidoc/node_modules/apidoc/template/utils/send_sample_request.js":"define([\r\n  'jquery',\r\n  'lodash'\r\n], function($, _) {\r\n\r\n  var initDynamic = function() {\r\n      // Button send\r\n      $(\".sample-request-send\").off(\"click\");\r\n      $(\".sample-request-send\").on(\"click\", function(e) {\r\n          e.preventDefault();\r\n          var $root = $(this).parents(\"article\");\r\n          var group = $root.data(\"group\");\r\n          var name = $root.data(\"name\");\r\n          var version = $root.data(\"version\");\r\n          sendSampleRequest(group, name, version, $(this).data(\"sample-request-type\"));\r\n      });\r\n\r\n      // Button clear\r\n      $(\".sample-request-clear\").off(\"click\");\r\n      $(\".sample-request-clear\").on(\"click\", function(e) {\r\n          e.preventDefault();\r\n          var $root = $(this).parents(\"article\");\r\n          var group = $root.data(\"group\");\r\n          var name = $root.data(\"name\");\r\n          var version = $root.data(\"version\");\r\n          clearSampleRequest(group, name, version);\r\n      });\r\n  }; // initDynamic\r\n\r\n  function sendSampleRequest(group, name, version, type)\r\n  {\r\n      var $root = $('article[data-group=\"' + group + '\"][data-name=\"' + name + '\"][data-version=\"' + version + '\"]');\r\n\r\n      // Optional header\r\n      var header = {};\r\n      $root.find(\".sample-request-header:checked\").each(function(i, element) {\r\n          var group = $(element).data(\"sample-request-header-group-id\");\r\n          $root.find(\"[data-sample-request-header-group=\\\"\" + group + \"\\\"]\").each(function(i, element) {\r\n            var key = $(element).data(\"sample-request-header-name\");\r\n            var value = element.value;\r\n            if ( ! element.optional && element.defaultValue !== '') {\r\n                value = element.defaultValue;\r\n            }\r\n            header[key] = value;\r\n          });\r\n      });\r\n\r\n      // create JSON dictionary of parameters\r\n      var param = {};\r\n      var paramType = {};\r\n      $root.find(\".sample-request-param:checked\").each(function(i, element) {\r\n          var group = $(element).data(\"sample-request-param-group-id\");\r\n          $root.find(\"[data-sample-request-param-group=\\\"\" + group + \"\\\"]\").each(function(i, element) {\r\n            var key = $(element).data(\"sample-request-param-name\");\r\n            var value = element.value;\r\n            if ( ! element.optional && element.defaultValue !== '') {\r\n                value = element.defaultValue;\r\n            }\r\n            param[key] = value;\r\n            paramType[key] = $(element).next().text();\r\n          });\r\n      });\r\n\r\n      // grab user-inputted URL\r\n      var url = $root.find(\".sample-request-url\").val();\r\n\r\n      // Insert url parameter\r\n      var pattern = pathToRegexp(url, null);\r\n      var matches = pattern.exec(url);\r\n      for (var i = 1; i < matches.length; i++) {\r\n          var key = matches[i].substr(1);\r\n          if (param[key] !== undefined) {\r\n              url = url.replace(matches[i], encodeURIComponent(param[key]));\r\n\r\n              // remove URL parameters from list\r\n              delete param[key];\r\n          }\r\n      } // for\r\n\r\n      $root.find(\".sample-request-response\").fadeTo(250, 1);\r\n      $root.find(\".sample-request-response-json\").html(\"Loading...\");\r\n      refreshScrollSpy();\r\n\r\n      _.each( param, function( val, key ) {\r\n          var t = paramType[ key ].toLowerCase();\r\n          if ( t === 'object' || t === 'array' ) {\r\n              try {\r\n                  param[ key ] = JSON.parse( val );\r\n              } catch (e) {\r\n              }\r\n          }\r\n      });\r\n\r\n      // send AJAX request, catch success or error callback\r\n      var ajaxRequest = {\r\n          url        : url,\r\n          headers    : header,\r\n          data       : param,\r\n          type       : type.toUpperCase(),\r\n          success    : displaySuccess,\r\n          error      : displayError\r\n      };\r\n\r\n      $.ajax(ajaxRequest);\r\n\r\n\r\n      function displaySuccess(data, status, jqXHR) {\r\n          var jsonResponse;\r\n          try {\r\n              jsonResponse = JSON.parse(jqXHR.responseText);\r\n              jsonResponse = JSON.stringify(jsonResponse, null, 4);\r\n          } catch (e) {\r\n              jsonResponse = data;\r\n          }\r\n          $root.find(\".sample-request-response-json\").html(jsonResponse);\r\n          refreshScrollSpy();\r\n      };\r\n\r\n      function displayError(jqXHR, textStatus, error) {\r\n          var message = \"Error \" + jqXHR.status + \": \" + error;\r\n          var jsonResponse;\r\n          try {\r\n              jsonResponse = JSON.parse(jqXHR.responseText);\r\n              jsonResponse = JSON.stringify(jsonResponse, null, 4);\r\n          } catch (e) {\r\n              jsonResponse = escape(jqXHR.responseText);\r\n          }\r\n\r\n          if (jsonResponse)\r\n              message += \"<br>\" + jsonResponse;\r\n\r\n          // flicker on previous error to make clear that there is a new response\r\n          if($root.find(\".sample-request-response\").is(\":visible\"))\r\n              $root.find(\".sample-request-response\").fadeTo(1, 0.1);\r\n\r\n          $root.find(\".sample-request-response\").fadeTo(250, 1);\r\n          $root.find(\".sample-request-response-json\").html(message);\r\n          refreshScrollSpy();\r\n      };\r\n  }\r\n\r\n  function clearSampleRequest(group, name, version)\r\n  {\r\n      var $root = $('article[data-group=\"' + group + '\"][data-name=\"' + name + '\"][data-version=\"' + version + '\"]');\r\n\r\n      // hide sample response\r\n      $root.find(\".sample-request-response-json\").html(\"\");\r\n      $root.find(\".sample-request-response\").hide();\r\n\r\n      // reset value of parameters\r\n      $root.find(\".sample-request-param\").each(function(i, element) {\r\n          element.value = \"\";\r\n      });\r\n\r\n      // restore default URL\r\n      var $urlElement = $root.find(\".sample-request-url\");\r\n      $urlElement.val($urlElement.prop(\"defaultValue\"));\r\n\r\n      refreshScrollSpy();\r\n  }\r\n\r\n  function refreshScrollSpy()\r\n  {\r\n      $('[data-spy=\"scroll\"]').each(function () {\r\n          $(this).scrollspy(\"refresh\");\r\n      });\r\n  }\r\n\r\n  function escapeHtml(str) {\r\n      var div = document.createElement(\"div\");\r\n      div.appendChild(document.createTextNode(str));\r\n      return div.innerHTML;\r\n  }\r\n\r\n  /**\r\n   * Exports.\r\n   */\r\n  return {\r\n      initDynamic: initDynamic\r\n  };\r\n\r\n});\r\n"}